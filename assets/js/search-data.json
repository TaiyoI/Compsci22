{
  
    
        "post0": {
            "title": "Installation Checks",
            "content": "python --version python2 --version . Python 3.9.12 Python 2.7.18 . conda list . # packages in environment at /Users/taiyoi/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 python3912jvsc74a57bd0a7fbbb54f4c181edc972ed0306a01439bd91c43236a2d6fefc317f72e31b9e0c /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd0a7fbbb54f4c181edc972ed0306a01439bd91c43236a2d6fefc317f72e31b9e0c bash /Users/taiyoi/Library/Jupyter/kernels/bash javascript /Users/taiyoi/Library/Jupyter/kernels/javascript python3 /Users/taiyoi/opt/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 python3912jvsc74a57bd0a7fbbb54f4c181edc972ed0306a01439bd91c43236a2d6fefc317f72e31b9e0c /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd0a7fbbb54f4c181edc972ed0306a01439bd91c43236a2d6fefc317f72e31b9e0c python3 /Users/taiyoi/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://taiyoi.github.io/Compsci22/techtalk/bash_checks",
            "relUrl": "/techtalk/bash_checks",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Algorithms and Logic",
            "content": "Vocabulary . Truth Table A truth table is a breakdown of a logic function by listing all possible values the function can attain. Such a table typically contains several rows and columns, with the top row representing the logical variables and combinations, in increasing complexity leading up to the final function. . | Linear Sequence of code The order of executions is strictly from top to bottom. This is good for learning, but is typically a poor method for an Algorithm! This was my 1st exploration above. . | Procedure (Function) A Procedure is a set of code instructions that has been abstracted into logical parts. Each code abstraction is called &quot;Procedural Abstraction&quot;. . | AND . | OR | XOR | NOT | . def xor(x,y): return (x or y) and not (x and y) # The boolean function def F(A, B, C, D): P = xor(A, B) Q = xor(C, D) R = xor(P, Q) return R # Translates between &#39;T&#39;/&#39;F&#39; and True/False: def f(a,b,c,d): t = &#39;T&#39; (A,B,C,D) = (a==t, b==t, c==t, d==t) R = F(A, B, C, D) return &quot;FT&quot;[R] print(&quot;Truth Table&quot;) print() print(&quot;A B C D | f(A,B,C,D)&quot;) print(&quot;========|===========&quot;) r = &quot;TF&quot; for a in r: for b in r: for c in r: for d in r: print(a, b, c, d, &quot;| &quot;, f(a, b, c, d)) . Truth Table A B C D | f(A,B,C,D) ========|=========== T T T T | F T T T F | T T T F T | T T T F F | F T F T T | T T F T F | F T F F T | F T F F F | T F T T T | T F T T F | F F T F T | F F T F F | T F F T T | F F F T F | T F F F T | T F F F F | F .",
            "url": "https://taiyoi.github.io/Compsci22/2022/12/06/ALGORITHMS.html",
            "relUrl": "/2022/12/06/ALGORITHMS.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Unit 3.9 & 3.11",
            "content": "Unit 3.9 . 3.9.1 Algorithms (Claire) . A little review on Algorithms: . what are the three components of an algorithm? . sel__ | seq__ | it___ | . Today we will be looking at algorithms from another standpoint. . Main Idea 1: Algorithms can be written in different ways and still do the same thing . However, Algorithms that look similar might not always have the same result | Different algorithms can be used to solve the same problem | . Examples . The goal with the two algorithms below is to show &quot;Wow! Good job!&quot; when you get an A and show &quot;Nice!&quot; when you get a B or C (pass), if you don&#39;t pass (lower than 70) it will show &quot;Do Better&quot; . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) if 70 &lt;= grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . Yay! it worked! Lets look at the next one. Do you notice any differences? Do you think this algorithm will still achieve the same goal? If not, what is the flaw? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) elif 70 &lt; grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . So, why is this important? Why are we even doing this? . When 2 algorithms look extremely similar, it is easy to assume they do the same thing. However, that is not the case and we have learn how to notice small differences in code and pretty much debug. . just know that codes that look similar don&#39;t always produce the same things :) | . Real-life situation (Storytime) . Tommy and Billy are working on solving the same issue with an algorithm Tommy creates a functioning code and yells &quot;I did it!&quot; He looks over at his friend Billy which is having a bit of trouble and he offers help However, Billy&#39;s code looks basically the same! which confuses them Then they remeber that they were taught that algorithms that look similar don&#39;t always have the same results and they collaborate to do further investigation:) . Now, without running, investigate the algorithm below. This one looks different. Do you thing it will still achieve the same goal as above? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) A = grade &gt;= 90 B = 70 &lt;= grade &lt; 90 C = grade &lt; 70 if A: print(&quot;Wow! Good job!&quot;) elif B: print(&quot;Nice!&quot;) elif C: print(&quot;Do Better&quot;) . Why is this important? . When collaborating or working on group projects, two people might come up with two different ways to solve a problem, and that happens a lot. . know that same goal can be achieved in many ways (the possibilities are endless) | make notes in you code! (explain how it works to others or you future self) | . How to write Nested Conditionals as Boolean expressions . the following 2 pieces of code is supposed to print &quot;don&#39;t go to school&quot; unless: . it is a weekday | . isHoliday = False isWeekday = True #if holiday, dont go to school if isHoliday == True: print(&quot;don&#39;t go to school!&quot;) # otherwise, if it is a weekday, go to school else: if isWeekday == True: print(&quot;go to school!&quot;) # but if it is neither a weekday or holiday, don&#39;t go to school else: print(&quot;don&#39;t go to school&quot;) . go to school! . isHoliday = False isWeekday = True # setting variables here (same as above to make comparison easier) driveSchool = not(isHoliday) and isWeekday if driveSchool == False: print(&quot;don&#39;t go to school!&quot;) if driveSchool == True: print(&quot;go to school!&quot;) # now we can make a regular conditional/ if statement without having a nested conditional . go to school! . Hacks . why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) | for the converted conditional to boolean conversion(0.10) | total: 0.25 | . 3.9.2 Developing Algorithms (Annika) . Developing Algorithms . When creating an algorithm, its good to outline its process before coding This ensures that it is sequenced correctly | . | You should represent the algorithm using a flowchart or natural language Visualization can help you better see the flow of the whole algorithm | This may allow for the coding process to be more efficient and effective | . | . Review of Selection and Iteration . Algorithms with iteration repeat a function until a goal is reached To more easily represent an algorithm without showing all the repeated steps, we can use iteration | . | Algorithms with selection only go through certain functions if certain things are true or false | . Example 1 . Start | The number of pretzels in the pack is 6 | Eat one pretzels, number of pretzels in pack goes down by 1 | How many pretzels are left? | Repeat step 3 until number of pretzels is 0 | Display that pack is empty | Finish | pretzel = 6 while (pretzel &gt; 0): pretzel -= 1 print(pretzel) if pretzel == 0: print(&quot;All done!&quot;) . Example 2 . The parking rate for a garage is as follows: Less than one hour: Free 1-2 hours: $5 &lt;br&gt; 2-3 hours: $8 3-4 hours: $10 &lt;br&gt; 4+ hours: $12 . . Start | Input number of hours parked | If hours is less than 1, cost is free | If hours is between 1 and 2, cost is $5 | If hours is between 2 and 3, cost is $8 | If hours is between 3 and 4, cost is $10 | If hours is more than 4, cost is $12 | Display cost and goodbye | Finish | print(&quot;The parking rate is as follows: n Less than one hour: Free n 1-2 hours: $5 n 2-3 hours: $8 n 3-4 hours: $10 n 4+ hours: $12&quot;) time = float(input(&quot;How many hours have you parked at this garage?&quot;)) print(&quot;How many hours have you parked at this garage?&quot;) print(time, &quot;hours costs:&quot;) if time &lt; 1 : print(&quot;Free&quot;) elif time &gt;= 1 and time &lt; 2 : print(&quot;$5&quot;) elif time &gt;= 2 and time &lt; 3 : print(&quot;$8&quot;) elif time &gt;= 3 and time &lt; 4 : print(&quot;$10&quot;) else: print(&quot;$12&quot;) print(&quot;Have a good day!&quot;) . Hacks . Develop your own complex algorithm using a flowchart and natural language, then code it! . Requirements: . Includes both a flowchart AND natural language | Working code of the same algorithm | Incorporates selection AND/OR iteration | Make it creative! | . Tips: . This site is good for making flowcharts! | Natural language should just be a list | Think about the whole process, not just the end result | . 3.9.3 Using preexisting algorithms (Grace) . Main Idea . Knowing existing algorithms can help construct new ones | simple existing algorithms can include determining min or max of two or more numbers | computing the sum or average | identifying if an integer is even or odd | . | Using existing correct algorithms can help as building blocks to reduce development time, testing, and identification of errors | . Create an algorithm that will start with any positive integer n and display the full sequence of numbers that result from following the Collatz Conjecture. . Example: 6 -&gt; 3 -&gt; 10 -&gt; 5 -&gt; 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1 . What does this function do? . if (n MOD 2 = 0) { display(&quot;n is even&quot;) } else { display(&quot;n is odd&quot;) } . By modifying the preexisting code, we can write create new code that follows th Collatz Conjecture. . DISPLAY (&quot;Choose a value for n&quot;) n &lt;- INPUT () REPEAT UNTIL (n = 1) { IF (n MOD 2 = 0 ) { n &lt;- n/2 } ELSE { n &lt;- n * 3 + 1 } . Hacks . Fix the number guessing game . Make a flow chart for the algorithm number guessing game | Make a function that gets the user guess | Modify the existing search function to give more encouraging feedback | import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): #add something here return #add something here #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if guess &lt; number: print(&quot;You are bad at guessing&quot;) #change this lower_bound = guess elif guess &gt; number: print(&quot;You suck :(&quot;) #change this upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . Unit 3.11 Binary Search (Claire) . Binary Search: . repeatedly dividing a search interval in half . Binary Search Steps: . first put the numbers in order ascending | descending | . | find the middle number first this is found by taking the highest index number plus the lowest index number and divide by 2 | the numbers on the right will be greater and the numbers on the left will be smaller | this can be represented with a binary tree middle number with the smaller number branched off on the left and bigger numbers branched off on the right | . | . | these lists are not always numbers lists can be made with strings | ex. [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;peach&quot;, &quot;watermelon&quot;] | alphabetical order a-z | z-a | . | . | . Practice: . What is the middle number in a Binary Search given the following set of numbers in order: 1, 5, 19, 44, 89 | What is the middle number in a Binary Search given the following set of numbers that are not in order: 3, 87, 12, 66, 22 | Hacks: . calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 | 92, 43, 74, 66, 30, 12, 1 | 7, 13, 96, 111, 33, 84, 60 | . | Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? | Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . | Rubric: . All 4 hacks are graded the same way . 0.25/0.25 - shows full understanding of the lesson, completes all hacks assigned with explanation to go above and beyond, any extra hacks to show more understanding . 0.23/0.25 - shows understanding of algorithms/binary search and completes all hacks . 0.20/0.25 - does not understand algorithm/binary search and has not completed hacks .",
            "url": "https://taiyoi.github.io/Compsci22/trimester%202%20student%20teaching/2022/12/02/unit3-9-11.html",
            "relUrl": "/trimester%202%20student%20teaching/2022/12/02/unit3-9-11.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "APCSP Student Teaching",
            "content": "Unit 3 Section 1-2 Notes . A variable is an abstraction inside a program that holds a value, where each variable has associated data storage that represents a single value at a time (However, if the value is a collection type such as a list, then the value can contain multiple values). | Variables typically have meaningful names that helps with the overall organization of the code and understanding of what is being represented by the variables | Some programming languages provide a variety of methods to represent data, which are referenced using variables 9Booleans, numbers, lists, and strings) | One form of a value is better suited for representation than another. | . Units 3 section 1-2 Hacks . Questions (College Board&#39;s Essential Knowledge): . What exactly IS a variable? | A variable is an abstraction inside a program that holds a value, where each variable has associated data storage that . What is the best data type to represent someone&#39;s dog&#39;s name? | A string . Why is it important to give variables specific names before containing values? | So you can call them whilst writing code. . What is the best way to represent someone&#39;s phone number? | You would use a string because you are not using the numbers of the phone number to compute anything. . In your own words, briefly explain by writing down what an assignment operator is | . An Assignment operator is essentially the equal sign in coding. . In Collegeboard pseudocode, what symbol is used to assign values to variables? | . &quot;&lt;--&quot; . A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? | . The command would display 22. . What is a list? | . a list is a sequence of elements with each element being a variable. . What is an element | . elements are the items inside a list . What is an easy way to reference the elements in a list or string? | . Using print . What is an example of a string? | . A phone number . Create a list with indices | Index a part of the list that you created. | Try to index from the end | . NamesList = [&quot;Taiyo&quot;, &quot;Luna&quot;, &quot;Parav&quot;, &quot;Ethan&quot;] print(NamesList[1]) print(NamesList[3]) . Luna Ethan . The following code is incomplete. Its intended purpose is to increase three numbers, all of which ask for user input, by an amount specified the user. The input code is abstracted, but the actual logic isn’t connected to the abstraction. . num1=input(&quot;Input a number. &quot;) num2=input(&quot;Input a number. &quot;) num3=input(&quot;Input a number. &quot;) add=input(&quot;How much would you like to add? &quot;) # Add code in the space below numlist = [int(num1), int(num2), int(num3)] print(&quot;User submitted numbers&quot;, numlist) print(&quot;Plus &quot; + add) # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in range (len(numlist)): numlist[i-1] += int(add) print(&quot;Result: &quot;, numlist)1 . User submitted numbers [1, 1, 1] Plus 1 Result: [2, 2, 2] . . . –UPDATE: fixed Steven’s hack, got 0.18/0.20 on Nathan’s hack, got 0.15/0.20 on Noor’s hack, full credit for Ederick’s hack (leniency).– Didn’t do Noor’s or Steven’s hacks and got 0.1 on Nathan’s hacks . 0.93/1 . . Unit 3 Section 3-4 Notes . An algorithm is a finite set of instruction that accomplish a task, it can be expressed by natural language, diagrams, and various other ways. . | Sequencing, selection, and iteration. . | Every algorithm can be created by a mixture of sequencing, selection, and iteration . | . Unit 3 Section 3-4 Hacks . You will describe the different parts of an algorithm, sequencing, selection, and iteration in the image below. | sequencing: The order of how to do a process | Selection: Allows an algorithm to make a decision based on the status if a condition is met | Iteration: A loop of doing something again and again. | . num1 = 5 num2 = num1 3 num3 = num2 / num1 (9 % 2) 4 result = (num3 % num1 + num2) % num3 3 / 5 . The Answer to this algorithmic expression is 3 . HACK for 3.3! CROSS WORD PUZZLE! . . example of how to do it in your blog: . 7 across - Baloney . Answers for the crossword puzzle . Iteration | Selection | Sequence | . 0.9/1 on the hacks for this section . . Hacks sections 5-6 . Explain in your own words what each logical operator does | . Not: Not displays the exact opposite of whatever data is inputted | And: And can help determine if two conditions are met | Or: Can help determine if one of the conditions is met | Code your own scenario that makes sense for each logical operator | . Running = False result = not(Running) print(result) . True . Money = 1000 Coins = 100 if Money &gt;= 100 and Coins &gt; 20: print(&quot;You Rich&quot;) . You Rich . Money = 1 Coins = 11 if Money &lt;= 0 or Coins &lt; 20: print(&quot;You Broke&quot;) . You Broke . 1 point for defining all the key terms in your own words. 0.5 points if you use examples that show you truly understand it. | . Selection: A piece of code that is determined by the output of true/false | Algorithm: a process or set of rules to be followed in calculations | Conditional Statement / If-Statement: a set of rules performed if a certain condition is met | 1 point for writing a program that uses binary conditional logic. 0.5 points if it is original and shows complexity | . x = 15 if x % 2 == 0: print(x, &quot;is even&quot;) else: print(x, &quot;is odd&quot;) . 15 is odd . 1 extra point for each challenge that you program or pair program. | 0.5 points for your review ticket looking nice, or you convincing me that it does. | 1 point for each and any extra work you do that helps show your understanding of conditionals. | . Hacks . Create 3 different flow charts representing nested statements and transfer them into code. | Create a piece of code that displays four statements instead of three. Try to do more if you can. | Make piece of code that gives three different recommendations for possible classes to take at a school based on two different conditions. These conditions could be if the student likes STEM or not. | . . . day = True night = False if day == True: print(&quot;wake up&quot;) if night == True: print(&quot;sleep&quot;) else: print(&quot;it is the afternoon&quot;) . wake up it is the afternoon . Units 3.9 and 3.11 Notes . Three main components of an algorithm 1. Selection 2. Sequence 3. Iteration - Two pieces of code that look similar don&#39;t always produce the same things. - make notes in code developing algorithms when creating an algorithm, it is good to outline its process before coding | it ensures that it is sequenced correctly | . . Units 3.9 and 3.11 Hacks . why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) | . This is because when you are programming, sometimes code can produce different results which is sub-optimal for you. . for the converted conditional to boolean conversion(0.10) | . total: 0.25 | . isnight = False isday = True if isnight == True: print(&quot;go to sleep&quot;) else: if isday == True: print(&quot;Wake up and work&quot;) . Wake up and work . isnight = False isday = True eat = not(isnight) and isday if eat == False: print (&quot;dont eat&quot;) if eat == True: print(&quot;go eat&quot;) . go eat . Includes both a flowchart AND natural language | Working code of the same algorithm | Incorporates selection AND/OR iteration | Make it creative! | . goodreviews = True afford = False if goodreviews == True: print(&quot;Has good reviews&quot;) if afford and goodreviews == True: print(&quot;product is affordable, has good reviews, and you should purchase your product&quot;) if goodreviews == False: print(&quot;adjust your search and click on another product&quot;) if afford == False: print(&quot;adjust your search&quot;) . Has good reviews adjust your search . import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) ##Write a function that gets a guess from the user using input() def guess(): return print:(&quot;good guess&quot;) #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if guess &lt; number: print(&quot;You are bad at guessing&quot;) #change this lower_bound = guess elif guess &gt; number: print(&quot;You suck :(&quot;) #change this upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 1 and 100. You guessed None. . TypeError Traceback (most recent call last) /Users/taiyoi/Documents/Compsci22-1/_notebooks/2022-11-30-College-Board-Student-teaching.ipynb Cell 25 in &lt;cell line: 33&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/taiyoi/Documents/Compsci22-1/_notebooks/2022-11-30-College-Board-Student-teaching.ipynb#X35sZmlsZQ%3D%3D?line=34&#39;&gt;35&lt;/a&gt; num_guesses += 1 &lt;a href=&#39;vscode-notebook-cell:/Users/taiyoi/Documents/Compsci22-1/_notebooks/2022-11-30-College-Board-Student-teaching.ipynb#X35sZmlsZQ%3D%3D?line=35&#39;&gt;36&lt;/a&gt; print(f&#34;You guessed {user_guess}.&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/taiyoi/Documents/Compsci22-1/_notebooks/2022-11-30-College-Board-Student-teaching.ipynb#X35sZmlsZQ%3D%3D?line=36&#39;&gt;37&lt;/a&gt; lower_bound, upper_bound = search(number, user_guess) &lt;a href=&#39;vscode-notebook-cell:/Users/taiyoi/Documents/Compsci22-1/_notebooks/2022-11-30-College-Board-Student-teaching.ipynb#X35sZmlsZQ%3D%3D?line=37&#39;&gt;38&lt;/a&gt; print(f&#34;Guess a number between {lower_bound} and {upper_bound}.&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/taiyoi/Documents/Compsci22-1/_notebooks/2022-11-30-College-Board-Student-teaching.ipynb#X35sZmlsZQ%3D%3D?line=39&#39;&gt;40&lt;/a&gt; print(f&#34;You guessed the number in {num_guesses} guesses!&#34;) /Users/taiyoi/Documents/Compsci22-1/_notebooks/2022-11-30-College-Board-Student-teaching.ipynb Cell 25 in search(number, guess) &lt;a href=&#39;vscode-notebook-cell:/Users/taiyoi/Documents/Compsci22-1/_notebooks/2022-11-30-College-Board-Student-teaching.ipynb#X35sZmlsZQ%3D%3D?line=22&#39;&gt;23&lt;/a&gt; def search(number, guess): &lt;a href=&#39;vscode-notebook-cell:/Users/taiyoi/Documents/Compsci22-1/_notebooks/2022-11-30-College-Board-Student-teaching.ipynb#X35sZmlsZQ%3D%3D?line=23&#39;&gt;24&lt;/a&gt; global lower_bound, upper_bound &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/taiyoi/Documents/Compsci22-1/_notebooks/2022-11-30-College-Board-Student-teaching.ipynb#X35sZmlsZQ%3D%3D?line=24&#39;&gt;25&lt;/a&gt; if guess &lt; number: &lt;a href=&#39;vscode-notebook-cell:/Users/taiyoi/Documents/Compsci22-1/_notebooks/2022-11-30-College-Board-Student-teaching.ipynb#X35sZmlsZQ%3D%3D?line=25&#39;&gt;26&lt;/a&gt; print(&#34;You are bad at guessing&#34;) #change this &lt;a href=&#39;vscode-notebook-cell:/Users/taiyoi/Documents/Compsci22-1/_notebooks/2022-11-30-College-Board-Student-teaching.ipynb#X35sZmlsZQ%3D%3D?line=26&#39;&gt;27&lt;/a&gt; lower_bound = guess TypeError: &#39;&lt;&#39; not supported between instances of &#39;NoneType&#39; and &#39;int&#39; . . calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 | 92, 43, 74, 66, 30, 12, 1 | 7, 13, 96, 111, 33, 84, 60 | . | Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? | Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . |",
            "url": "https://taiyoi.github.io/Compsci22/2022/11/30/College-Board-Student-teaching.html",
            "relUrl": "/2022/11/30/College-Board-Student-teaching.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "APCSP FINAL",
            "content": "Quick Message . 01000011 01101111 01101101 01110000 01110101 01110100 01100101 01110010 00100000 01110011 01100011 01101001 01100101 01101110 01100011 01100101 00100000 01101001 01110011 00100000 01101101 01111001 00100000 01100110 01100001 01110110 01101111 01110010 01101001 01110100 01100101 00100000 01100011 01101100 01100001 01110011 01110011 . AP College Board Experience . This is a compliation of all of my work from this year’s AP college board quizzes . Questions/Difficulties . Overall, the questions were very difficult because I didn’t have much coding algorithm experience so I had to go online and do some researching. But overall, it started to make sense overtime. It was very similar to other algorithmic things in life like solving a rubix cube and math. . MCQ College Board PT.2 . I was having lots of trouble on the Internet portion of the APprep part. Although, I got all the answers correct last time the internet portion of the mc was difficult. The specific question: “Open protocols allow devices to specify how data packets are to be routed on the Internet in advance.” Stumped me because I didn’t really have much experience with routing on the internet. . Experience of Night At The Museum . Although the night of the museum event was only a 30 minute shift, I was able to view other classmates and other period’s projects. My group got a lot of feedback from other students as our project was not fully 100% finished. We got more inspiration from other projects. For example, changing the aesthetics of our project, adding more features such as a comment area, where you could comment on the different options of teams that we had. There especially was this one parent that questioned us about the mechanics and overall code and we were able to give them a satisfactory response and they gave us a suggestion on changing the colors of our site. I also had fun talking to others from other classes and socializing with those that weren’t in CSP and they all decided to take it next year. . College Board MCQ Final . Going into the Final, I was scared and nervous as the MCQ had 50 questions about a topic that two years ago was almost completely unknown to me. However, after watching the AP College board videos over the course of the trimester and also performing a lot of hands on activities such as creating our fast pages and learning on khan academy (especially the front end side). I was actually extremely surprise on my result: 46/50!! . Here are the questions I got Wrong On the MCQ . . Which of the following is a primary reason for the use of open protocols on the Internet? The right answer to this is: Open protocols provide a way to standardize data transmission between different devices. | This is the right answer because you need a standardized way of transmission in order to create a way of transmission between different devices across different platforms. | . | . A video game character can face toward one of four directions: north, south, east, and west. Each direction is stored in memory as a sequence of four bits. A new version of the game is created in which the character can face toward one of eight directions, adding northwest, northeast, southwest, and southeast to the original four possibilities. Which of the following statements is true about how the eight directions must be stored in memory? The right answer to this is: Four bits are enough to store the eight directions. | This is the right answer because Four bits can represent 2^4, or 16 pieces of information. | . | . Consider the following numeric values. | Binary 1011 Binary 1101 Decimal 5 Decimal 12 Which of the following lists the values in order from least to greatest? . The right answer to this is: Decimal 5, binary 1011, decimal 12, binary 1101 | This is the right answer because Binary 1011 is equivalent to decimal 11 and should be placed before decimal 12. | . . Consider the following code segment. | x ← 25 . y ← 50 . z ← 75 . x ← y . y ← z . z ← x . Which of the variables have the value 50 after executing the code segment? . The right answer to this is: x and z only | This is the right answer because the value of y is initially 50, but its value is changed to 75 in the fifth statement. The fourth statement assigns the value 50 to x. The sixth statement assigns the value 50 to z. | .",
            "url": "https://taiyoi.github.io/Compsci22/2022/11/08/CSP-Final.html",
            "relUrl": "/2022/11/08/CSP-Final.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "APCSP MCQ",
            "content": "MCQ College Board . . Questions/Difficulties . Overall, the questions were very difficult because I didn’t have much coding algorithm experience so I had to go online and do some researching. But overall, it started to make sense overtime. It was very similar to other algorithmic things in life like solving a rubix cube and math. . MCQ College Board PT.2 . I was having lots of trouble on the Internet portion of the APprep part. Although, I got all the answers correct last time the internet portion of the mc was difficult. The specific question: “Open protocols allow devices to specify how data packets are to be routed on the Internet in advance.” Stumped me because I didnt really have much experience with routing on the internet. .",
            "url": "https://taiyoi.github.io/Compsci22/class%20activities/week%206/2022/10/02/APPrepMC.html",
            "relUrl": "/class%20activities/week%206/2022/10/02/APPrepMC.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Scrum Team",
            "content": "Scrum Master: Ethan Tran | DevOPs: Rohin Sood | Frontend Devs: Luna Iwazaki, Taiyo Iwazaki | Backend Dev: Parav Salaniwal | . .",
            "url": "https://taiyoi.github.io/Compsci22/scrum/2022/09/26/Scrum.html",
            "relUrl": "/scrum/2022/09/26/Scrum.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Human day blog",
            "content": "What are we even talking about? . What makes one happy and what goals and habits does that person do to obtain happiness | . Psychology and The Good Life . Students are too focused on school and stressed over classes that they cannot enjoy life | Some of those leisurely activities include not being able to read books because of time restrictions | Students are overwhelmed, they are losing valuable information that they could gain by performing the leisurely activities like reading books. | Anxiety, Pressure, and Stress cause drop in performance. | Students become depressed and cannot perform tasks. | . What can students do in class to help combat stress and anxiety? . Being an Active listener | Doing your activities in class when you are given the time | Not wasting time that could be used to finish valuable work and being productive. | Become a happier person | Interact with classmates and teachers | . Takeaways . Most students that undergo stress, depression, and anxiety because of school work typically are the ones that do not use their time in class wisely thus, leading to less time to do things outside of class that can help make one less stressed. Using the time given in class will let a student become successful, less stressed, and happier. When you use the your time wisely and plan out a schedule of class work and leisurely activities. Making goals to chase can help you become more productive and waste less time. .",
            "url": "https://taiyoi.github.io/Compsci22/class%20activities/week%203/2022/09/15/Human-Day-Blog.html",
            "relUrl": "/class%20activities/week%203/2022/09/15/Human-Day-Blog.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Creative Development blog",
            "content": "Link . Here is the link to my app lab: https://studio.code.org/projects/applab/Cc-qDDjdZPYrvRCUXBVPxE5Q_7kc9zkwli2nr2dWFDo . Outline . Making a quiz based on different diets | Using different functions on the program blocks | Changing the theme and color of the quiz | Four Answer Options | Using score to determine what type of diet you are associated with. | You can easily change the type of quiz by changing the parameters. | . Building . The project initially was a bit confusing to me and I wasn’t really sure where to start. However, I did have some prior experience from other sources such as FLL and code.org coding day. Using primarily the “on event” and “set screen” blocks, I was able to create a quiz that revolved around who I am. I also added a finished screen and fail screen. Along with those, I added many images to make my code pop up more. Coming up with the questions was also really fun because The project was really fun to make and I enjoyed the experience. . Findings . Code.org is easier to use than python because of the blocks which allows for a better user experience | Blocks let you add and adjust code much easier | Website lets you view output automatically | Can run and test programs much easier | Can be run in your own web browser | .",
            "url": "https://taiyoi.github.io/Compsci22/class%20activities/week%203/2022/09/12/creative-development.html",
            "relUrl": "/class%20activities/week%203/2022/09/12/creative-development.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Performance Task",
            "content": "Purpose . Creating awareness of other running athletes and gaining more traction to running as a sport Bringing other athletes from other sports into cross country and track because it can help them improve in their other sport Helping those who don’t have resources to help them run by repurposing old running shoes and making them look new Donating old or new running shoes to those in need of shoes or in need of shoes for their sport Safety, bringing different exercises and stretches on the website to help those experiencing shinsplints ect. to help them find out what stretch, exercise, or help they might need for their issue . Initial Thoughts . Using all of the team members different coding skills this website can be able to work as a athletic website in a whole. My web design can help make the website look less boring and have videos or images and colors to direct athletes to different pages of the website. Luna, who is also in cross country and track can add in his input and help bring real facts onto this website. He can also give us experience as to his sport and how he deals with problems when running. . Code . Throughout this trimester, I have learned a lot about how to code a blog and now creating an app that can run what ever I code. .",
            "url": "https://taiyoi.github.io/Compsci22/class%20activities/week%203/2022/09/12/Performance-Task.html",
            "relUrl": "/class%20activities/week%203/2022/09/12/Performance-Task.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Loops in functions",
            "content": "Recursive Function . Recursive functions are used for computations | Recursive functions call onto dictionaries | Dictionaries are a sequence of variables that functions can pull from. | . def factorial(x): &quot;&quot;&quot;This is a recursive function to find the factorial of an integer&quot;&quot;&quot; if x == 1: return 1 else: return (x * factorial(x-1)) num = 5 print(&quot;The factorial of&quot;, num, &quot;is&quot;, factorial(num)) . The factorial of 5 is 120 . While Functions . The while loop is used to repeat a section of code an unknown number of times until a specific condition is met | . # numbers up to # sum = 1+2+3+...+n # To take input from the user, # n = int(input(&quot;Enter n: &quot;)) n = 10 # initialize sum and counter sum = 0 i = 1 while i &lt;= n: sum = sum + i i = i+1 # update counter # print the sum print(&quot;The sum is&quot;, sum) . The sum is 55 .",
            "url": "https://taiyoi.github.io/Compsci22/week%203/2022/09/06/loops.html",
            "relUrl": "/week%203/2022/09/06/loops.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Java",
            "content": "JavaScript references . JavaScript is the most important language you need to learn as a frontend developer. It&#39;s a great first language for web developers to learn. . W3Schools - reference | feecodecamp.org - pbl . | javascript30.com - pbl . | . console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, World!&quot;); . Hello, World! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Taiyo&quot;, &quot;TaiyoI&quot;, 2025), new Person(&quot;Rohin&quot;, &quot;rohinsood&quot;, 2025), new Person(&quot;Ethan&quot;, &quot;realethantran&quot;, 2025), new Person(&quot;Luna&quot;, &quot;lunaiwa&quot;, 2025), new Person(&quot;Parav&quot;, &quot;paravsalaniwal&quot;, 2025), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Taiyo&#39;, ghID: &#39;TaiyoI&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Rohin&#39;, ghID: &#39;rohinsood&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Ethan&#39;, ghID: &#39;realethantran&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Luna&#39;, ghID: &#39;lunaiwa&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Parav&#39;, ghID: &#39;paravsalaniwal&#39;, classOf: 2025, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Taiyo | TaiyoI | 2025 | Student | Rohin | rohinsood | 2025 | Student | Ethan | realethantran | 2025 | Student | Luna | lunaiwa | 2025 | Student | Parav | paravsalaniwal | 2025 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://taiyoi.github.io/Compsci22/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Installation Checks",
            "content": "python --version python2 --version . Python 3.9.12 Python 2.7.18 . conda list . # packages in environment at /Users/taiyoi/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 python3912jvsc74a57bd0a7fbbb54f4c181edc972ed0306a01439bd91c43236a2d6fefc317f72e31b9e0c /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd0a7fbbb54f4c181edc972ed0306a01439bd91c43236a2d6fefc317f72e31b9e0c bash /Users/taiyoi/Library/Jupyter/kernels/bash javascript /Users/taiyoi/Library/Jupyter/kernels/javascript python3 /Users/taiyoi/opt/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 python3912jvsc74a57bd0a7fbbb54f4c181edc972ed0306a01439bd91c43236a2d6fefc317f72e31b9e0c /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd0a7fbbb54f4c181edc972ed0306a01439bd91c43236a2d6fefc317f72e31b9e0c python3 /Users/taiyoi/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://taiyoi.github.io/Compsci22/techtalk/bash_checks",
            "relUrl": "/techtalk/bash_checks",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Observations",
            "content": "Theme Changed . Here is a screenshot of me changing the theme of my fastpages to the hacker theme . . . Observations . My _pages links are not working so I cannot search, click on my different subjects, click on the about me, or click on tags. | However, Everything else seems to be working correctly | .",
            "url": "https://taiyoi.github.io/Compsci22/class%20activities/week%203/2022/09/02/Observations.html",
            "relUrl": "/class%20activities/week%203/2022/09/02/Observations.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Alumni Seminar",
            "content": "Notes . six talkers | Anthony Vo | Andrew | Colen | CSA helps apply to real world problems | . What is the biggest challenge you’ve encountered with computer science? . having many errors | googling can help get over errors | clashing egos | focusing on your own path because others will make you feel bad for your self | transition from highschool comp sci to college compsci is hard because theory comes into play | syntax errors are very annoying | google can help you with many syntax problems | temptation to BS many projects | making sure you do not cut corners and make sure everything you do is like a checkbox for points | having a mindset to go above and beyond can help you | Getting started in a new area of computer science. | Computer science is very inter-connected | . Are there any PBL scenarios in college computer science classes (project based learning) . There will not be many hands on experience in college | make the most of your time while you have it | Mix of both: PBL and Tests. | PBL will be in college but not everyone does sprints | . How have you applied CS in your major if you are not majoring in CS? . Converting input | Coding will be everywhere | Many calculations | Stress tests | 3D printing | Computer science can help with higher level math courses | Stats courses | Will be coding in stats | . For existing college students, have you had a job with school or professor? . Tutoring | For coding jobs | Being above and beyond | Intern at Northrop Grumman | Robotics coaches also a teacher at UCSD | Triton AI | Code Ninjas | LG Intern (APIS Web Development) | Insights . | Using this information that I have learned from the seminar, I now understand what I can do with my computer science knowledge in class and implement it to my daily life. | .",
            "url": "https://taiyoi.github.io/Compsci22/extra%20credit/week%202/2022/08/29/Extra-credit-seminar.html",
            "relUrl": "/extra%20credit/week%202/2022/08/29/Extra-credit-seminar.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Taiyo's Jupyter QNAQuiz",
            "content": "#Using a Dictionary with the variable QandA, I was able to create a quiz that abstracted data from the dictionary and inputted it into the quiz. QandA = [ &quot;1. True or False, def is a key word in Python that defines a function&quot;, &quot;True&quot;, &quot;2. True or False, In Python anatomy of you will NOT be importing libraries and functions?&quot;, &quot;False&quot;, &quot;3. True or False, Hello world is a string literal?&quot;, &quot;True&quot;, &quot;4. True or False, Output in Jupyter Notebook is below the code cell&quot;, &quot;True&quot;, &quot;5. True or False, Input and Output in Jupyter Notebook Input is NOT in line with Output?&quot;, &quot;True&quot;, &quot;6. True or False, an if expression is not evaluated for true or false&quot;, &quot;False&quot;, &quot;7. True or False, return command in function does not return msg input by user&quot;, &quot;False&quot;, &quot;8. True or False, false takes branch of code directly under else command&quot;, &quot;True&quot;, &quot;9. True or False, correct += 1 is NOT the way to add one to the score&quot;, &quot;False&quot;, &quot;10. True or False, is msg a parameter to the print function?&quot;, &quot;True&quot;, ] #total points and using new quiz var points = 0 current = 0 quiz = 1 print (&quot;Welcome to my true or false quiz!&quot;) #Using while lets me loop function while quiz &lt; 11: print() question = input(QandA[current]) if question == QandA[current+1]: print (&quot;That&#39;s correct!&quot;) points = points +1 current = current +2 else: print (&quot;Sorry, that is incorrect!&quot;) points = points -1 current = current +2 quiz = quiz +1 #Final Message print(&quot;Good Job, You scored&quot;, points, &quot;points out of ten&quot;) . Welcome to my true or false quiz! That&#39;s correct! That&#39;s correct! That&#39;s correct! That&#39;s correct! That&#39;s correct! That&#39;s correct! That&#39;s correct! That&#39;s correct! That&#39;s correct! That&#39;s correct! Good Job, You scored 10 points out of ten .",
            "url": "https://taiyoi.github.io/Compsci22/week%202/2022/08/26/QNA-List.html",
            "relUrl": "/week%202/2022/08/26/QNA-List.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Taiyo's Jupyter MCQuiz",
            "content": "score = 0 # Question 1 answer1 = input(&quot;What does Def do in a function? na. nothing nb. defines a function nc. sudo code nd. changes directory nAnswer: &quot;) if answer1 == &quot;b&quot; or answer1 == &quot;defines a function&quot;: score += 1 print (&quot;correct!&quot;) print (&quot;score: &quot;, score) print (&quot; n&quot;) else: print(&quot;Incorrect! The answer is: defines a function.&quot;) print(&quot;score: &quot;, score) print(&quot; n&quot;) # Question 2 answer2 = input(&quot;What is Python3 na. A snake nb. A programming language nc. A video game nd. Javascript nAnswer: &quot;) if answer2 == &quot;b&quot; or answer1 == &quot;A programming language&quot;: score += 1 print (&quot;correct!&quot;) print (&quot;score: &quot;, score) print (&quot; n&quot;) else: print(&quot;Incorrect! The answer is: A programming language&quot;) print(&quot;score: &quot;, score) print(&quot; n&quot;) # Question 3 answer3 = input(&quot;What is a sequence? na. Two or more lines of code nb. A line of code nc. multiple words nd. I dont know nAnswer: &quot;) if answer3 == &quot;a&quot; or answer1 == &quot;Two or more lines of code&quot;: score += 1 print (&quot;correct!&quot;) print (&quot;score: &quot;, score) print (&quot; n&quot;) else: print(&quot;Incorrect! The answer is: Two or more lines of code&quot;) print(&quot;score: &quot;, score) print(&quot; n&quot;) #Final Message if score &lt;= 1: print (&quot;Your total score is:&quot;, score, &quot;- Get Better&quot;) elif score == 2: print (&quot;Your total score is:&quot;, score, &quot;- You Did Alright&quot;) else: print (&quot;Your total score is:&quot;, score, &quot;-GOOD JOB!&quot;) . correct! score: 1 correct! score: 2 correct! score: 3 Your total score is: 3 -GOOD JOB! .",
            "url": "https://taiyoi.github.io/Compsci22/week%202/2022/08/26/MCQuiz.html",
            "relUrl": "/week%202/2022/08/26/MCQuiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Extra Credit",
            "content": "Productive Blogging . -blogging for other classes -being productive . Procedural Abstraction . little pieces of code so that you can put them in other larger parts of code | . Data Abstraction .",
            "url": "https://taiyoi.github.io/Compsci22/class%20activities/week%202/2022/08/25/Notes-for-CSP.html",
            "relUrl": "/class%20activities/week%202/2022/08/25/Notes-for-CSP.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Taiyo's Jupyter Post",
            "content": ". &quot;My First Jupyter Notebook&quot; . &quot;JUPYTER!!&quot; . This is my Jupyter Notebook . It is a little different than using markdown in the _post section, however, integrating other languages under the notebook section is much easier. . Using python, I will print &quot;hello&quot; bellow. . Printing Hello!!! . print(&quot;hello&quot;) variable = &quot;Coding is fun&quot; print(variable) . hello Coding is fun . Calculating area of a triangle using Python!!! . a = int(input(&quot;A Value&quot;)) b = int(input(&quot;B Value&quot;)) c = int(input(&quot;C Value&quot;)) # Uncomment below to take inputs from the user # a = float(input(&#39;Enter first side: &#39;)) # b = float(input(&#39;Enter second side: &#39;)) # c = float(input(&#39;Enter third side: &#39;)) # calculate the semi-perimeter s = (a + b + c) / 2 # calculate the area area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 print(&#39;The area of the triangle is %0.2f&#39; %area) . The area of the triangle is 6.00 .",
            "url": "https://taiyoi.github.io/Compsci22/week%201/2022/08/21/Jupyter-Post.html",
            "relUrl": "/week%201/2022/08/21/Jupyter-Post.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "My First Blog Post",
            "content": "My First Blog Post!! . This is my first blog post!! :joy: . Hello, My name is Taiyo Iwazaki and this is my first blog post on my fast pages website for computer science. . My Favorite foods . Pizza | Pasta | Oatmeal | Steak | Ramen | . Ok, now that you have seen my favorite foods, lets explore coding! . Adding a table!! . Times Table Easy . 1 | 2 | 3 | . 2 | 4 | 6 | . 3 | 6 | 9 | . 4 | 8 | 12 | . 5 | 10 | 15 | . Exploring Coding . ’’’ { print(“hello world”) var = “coding is fun” print(“var”) } ‘’’ . My Youtube Channel . Subscribe to my YouTube Channel! :joy: https://www.youtube.com/channel/UC4AOSpmXdOeJXestKv5Fxjw . Photo . Here is a photo! . Thanks For Reading!! .",
            "url": "https://taiyoi.github.io/Compsci22/week%201/2022/08/19/My-First-Post.html",
            "relUrl": "/week%201/2022/08/19/My-First-Post.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus Amount of Bits . +1 | 00000000 | 0 | 0 | 0 | -1 | 10 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | | | .",
            "url": "https://taiyoi.github.io/Compsci22/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Vocab",
          "content": "Vocabulary for this tri here . Key Vocabulary . Sequence: . two or more lines of code | . Variable . A value that changes based off of conditions | .",
          "url": "https://taiyoi.github.io/Compsci22/Vocab/",
          "relUrl": "/Vocab/",
          "date": ""
      }
      
  

  

  

  
      ,"page3": {
          "title": "Game",
          "content": "2048 . 104+24 1420 New Game . Keep Going Try Again? 26688244622 .",
          "url": "https://taiyoi.github.io/Compsci22/game/",
          "relUrl": "/game/",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "Calculator",
          "content": "0 EE x^2 π % 1 2 3 + 4 5 6 - 7 8 9 * A/C 0 . =",
          "url": "https://taiyoi.github.io/Compsci22/calculator/",
          "relUrl": "/calculator/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://taiyoi.github.io/Compsci22/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}