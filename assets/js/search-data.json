{
  
    
        "post0": {
            "title": "Installation Checks",
            "content": "python --version python2 --version . Python 3.9.12 Python 2.7.18 . conda list . # packages in environment at /Users/taiyoi/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 python3912jvsc74a57bd0a7fbbb54f4c181edc972ed0306a01439bd91c43236a2d6fefc317f72e31b9e0c /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd0a7fbbb54f4c181edc972ed0306a01439bd91c43236a2d6fefc317f72e31b9e0c bash /Users/taiyoi/Library/Jupyter/kernels/bash javascript /Users/taiyoi/Library/Jupyter/kernels/javascript python3 /Users/taiyoi/opt/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 python3912jvsc74a57bd0a7fbbb54f4c181edc972ed0306a01439bd91c43236a2d6fefc317f72e31b9e0c /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd0a7fbbb54f4c181edc972ed0306a01439bd91c43236a2d6fefc317f72e31b9e0c python3 /Users/taiyoi/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://taiyoi.github.io/Compsci22/techtalk/bash_checks",
            "relUrl": "/techtalk/bash_checks",
            "date": " • Apr 23, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "P4-M 4/24 Big Idea 3",
            "content": "Introduction: Zeen . Hello, my name is zeen and today we will be presenting big idea 3. Our topics include 2d arrays, iteration, and lists and dictionaries. . Objectives . Master the concepts of iteration, list, 2d-arrays, Dictionaries, and APIs . Vocab . Here is some vocab during the lesson, you should be familar with them already no need for me to read these out, now I will pass the speaking off to Kush . Iteration: A process that repates itself | Array: Sometimes called a list, can keep strings and intergers inside it | 2D-Array: A collection of data elements arranged in a grid-like structure with rows and columns | Mutable: the ability to be changed or modified | Key: A Singular identifier that is associated with a certin value | . 1: 2D Array . Tic Tac Toe:Kush Sirohi . What are some examples of 2d Arrays | Some examples of 2d Arrays are a setting plan for a room plan layout | What is a modern day game that could be classified as a 2D array | A modern day game that could be classified as a 2d array could be tic tac toe. | . How I used 2D Arrays (game example) . Describe a 2D array in your own words | A 2d array is basically a data set that is organized into rows and columns. | . 2: Iteration . Robot Game:Finn Carpenter- What is the defenition of iteration in your own words . The definition of iteration is basically the repeating process of a certain piece of code because it reduces complexity. | . Iteration Game . Link to the game | Play the levels (only play the first 2 in class) | Explain how the game relates to itertation | because you are using loops | . How I used iteration (game example) . What parts of the code use iteration | the parts of the code that uses iteration is using if functions. | . How I used List to make a game . Explain which parts of the code use lists | in the beginning, there is a list that holds the information | Explain what list manipulation is happening in that part | the code is manipulating the list because it is pulling from the list to the guesses. | . import random word_list = [&quot;python&quot;, &quot;computer&quot;, &quot;programming&quot;, &quot;algorithm&quot;, &quot;database&quot;, &quot;function&quot;, &quot;variable&quot;, &quot;loop&quot;, &quot;iteration&quot;, &quot;array&quot;, &quot;mutable&quot;, &quot;insertion&quot;, &quot;deletion&quot;, &quot;key&quot;, &quot;API&quot;] word = random.choice(word_list) scrambled_word = &quot;&quot;.join(random.sample(word, len(word))) print(f&quot;Unscramble the following Computer Science Word: {scrambled_word}&quot;) hints = 1 guesses = 1 guess = &quot;&quot; while guess != word and guesses &lt;= 4: guess = input(&quot;What&#39;s the unscrambled word? &quot;).lower() if guess != word: print(&quot;Sorry, that&#39;s not the word. Try again!&quot;) if guesses == 1: guesses += 1 elif guesses == 2: print(f&quot;Hint 1: The first letter of the word is &#39;{word[0]}&#39;&quot;) guesses += 1 elif guesses == 3: print(f&quot;Hint 2: The second letter of the word is &#39;{word[1]}&#39;&quot;) guesses += 1 else: print(f&quot;All 4 Guesses have been used, you didn&#39;t unscramble the word, the word was {word}&quot;) guesses += 1 else: print(&quot;Congratulations, you unscrambled the word!&quot;) . Unscramble the following Computer Science Word: tenldieo Congratulations, you unscrambled the word! . Hacks: Your Score/1 . General 0.3 . Copy this noteboook into your personal fastpages | Answer all questions put the question in a new markdown block (so we can grade faster) | . | . Iteration 0.2 (can get up to 0.23) . Get to level 5 Take ScreenShots of your name inside the box an put them in your ticket | . | Create a code segment with iteration that does something cool | . . rows = 5 for i in range(rows): # print spaces before asterisks to create pyramid shape for j in range(rows-i-1): print(&quot; &quot;, end=&quot;&quot;) # print asterisks in increasing order for j in range(i+1): print(&quot;* &quot;, end=&quot;&quot;) # move to next line after printing each row print() . * * * * * * * * * * * * * * * . 2D array 0.2 (can get up to 0.23) . Explain how the tic tac toe game works Tic Tac Toe game works by defining the variable &quot;board&quot; with 3 different lists (which is a 2D array.) It then defines a funtion where it prints the board and a function that checks if there is a win or a tie. Finally, it defines the function &quot;play_game&quot; that has a while loop that contains conditionals. It takes the user&#39;s inut and calls the functions defined earlier. | Give 3 Examples of games that can be made from 2D arrays | . Minesweeper: Minesweeper is a popular single-player game that involves uncovering cells on a grid to find hidden mines. The game is played on a 2D array, where each cell can either be empty or contain a mine. The player&#39;s objective is to reveal all the cells that do not contain mines without detonating any mines. The player can deduce the location of mines by using the numbers on the revealed cells, which indicate the number of adjacent cells that contain mines. . Battleship: Battleship is a two-player game that involves guessing the location of the opponent&#39;s hidden ships on a 2D grid. Each player has a grid where they place their ships, and the opposing player tries to guess the location of the ships by selecting cells on their own grid. The game is played on a 2D array, where each cell can either be empty or contain a ship. The objective of the game is to sink all the opponent&#39;s ships. . Snake: Snake is a classic arcade game where the player controls a snake that moves around a 2D grid, eating food and growing in length. The game is played on a 2D array, where each cell can either be empty or contain food. The snake moves continuously in a particular direction, and the player must steer the snake to avoid running into walls or its own tail. The objective of the game is to eat as much food as possible without crashing the snake. . List and Dictionaries 0.2 (can get up to 0.23) . The difference between lists and dictionaries: lists use [] dictionaries use {} lists have items dictionaries have keys and values lists are ordered dictionaries are unordered Lists can contain elements of any data type (dictionaries can&#39;t with keys) Lists can be accessed with index numbers Dictionaries can be accessed with keys . | Make a code block that manipulates either a list or a dictionary . | . numbers = [5, 1, 4, 2, 8] sorted_numbers = sorted(numbers) print(sorted_numbers) . [1, 2, 4, 5, 8] .",
            "url": "https://taiyoi.github.io/Compsci22/2023/04/21/EOYPLAYGROUND.html",
            "relUrl": "/2023/04/21/EOYPLAYGROUND.html",
            "date": " • Apr 21, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "2018 MCQ Test",
            "content": "Total Score . . Q13 Social media hypotheses . . Correct answer: . The mobile app release led to users tending to write shorter messages. . Q43 Runtime of algorithm for online retailer . . The algorithm runs in reasonable time. . This option is correct. The pattern in the table appears to indicate that there are n squared steps for a list containing n items. This number of steps is a polynomial and therefore the algorithm runs in reasonable time. .",
            "url": "https://taiyoi.github.io/Compsci22/2023/04/18/2018-MCQ.html",
            "relUrl": "/2023/04/18/2018-MCQ.html",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Write up NON test",
            "content": "Describe Procedural Abstraction, discussion on code and abstraction techniques used: Frontend/Backend, Functions, Classes, etc . Procedural abstraction is a key concept in programming that allows developers to create complex programs by breaking them down into smaller, more manageable procedures. This technique allows developers to work with complex systems without worrying about the implementation details of each method. In my project, I used procedural abstraction techniques to separate front-end and back-end code, creating classes and functions that perform specific tasks. . On the front end, I used HTML, CSS, and JavaScript to create the user interface. These technologies allowed her to abstract the implementation details of UI components such as buttons, forms, and text fields. Instead, I could focus on building functions that handle user interactions and send data to the backend for processing. For example, when a user submits a comment, a function is called that makes her AJAX request to the backend, passing the comment data as a parameter. . On the backend, I used Flask and SQLAlchemy to create a RESTful API to handle data and business logic. Flask is a micro web framework that allows you to create routes associated with specific functions. SQLAlchemy is an object-relational mapping (ORM) tool that allows you to interact with your database using Python objects instead of SQL queries. I’ve created a Comment class that maps to a database table to make it easy to create, read, update, and delete comments. . Describe Data Abstraction, discussion on data used and data structures to support project: JSON, Dictionaries, Lists, and/or Database Tables. . Data abstraction is another important concept in programming that allows developers to manipulate data without worrying about implementation details. In my project, I used a data abstraction technique to store the comment data in a database table. I used SQLite as the database engine. It’s a lightweight serverless standalone database that’s easy to set up and use. I’ve also used SQLAlchemy to abstract away database implementation details such as: B. Connection Management, Query Generation, and Result Processing. To display the comments on the frontend, I used a list data structure to store the comment objects retrieved from the backend. I used an iterative control structure to iterate through the comment list and dynamically generate the HTML elements. For example, when a user visits the comments page, an AJAX request is sent to the backend to fetch all comments. When comments are retrieved, a function is called that iterates through the comments list and generates an HTML element for each comment. . Describe Usage of Control Structures, ie Iteration and Conditional Statements. Areas where you use lists and interation in Frontend Display. Areas were you decide and execulte different paths of code, for instance Create vs Read vs Update vs Delete. Also, show a function where a different parameter or condition causes a differen result. . In the backend,I used conditional statements to determine which code path to execute based on the HTTP method and URL endpoint. For example, sending a POST request to the /comments endpoint executes a different code path than a GET request to the same endpoint. I also used conditional statements to handle errors and exceptions. B. If the database connection fails or the query returns no results. . Finally, I created a function that returns different results based on different parameters or conditions. For example, the backend comment function returns all comments when a GET request is made, but returns a success message when a POST request is made. This function takes a parameter that specifies the HTTP method that determines the result. This technique allows you to reuse the same function for different purposes and reduces code duplication. .",
            "url": "https://taiyoi.github.io/Compsci22/2023/04/16/Write-up.html",
            "relUrl": "/2023/04/16/Write-up.html",
            "date": " • Apr 16, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: 3.2 | Memory in GB: 8 | Storage in GB: 245.11 | OS: Mac OS Ventura | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . -Input Devices: These are devices that allow users to input data or commands into a computer. Examples include a keyboard, mouse, microphone, and scanner. . Output Devices: These are devices that allow a computer to communicate information back to the user. Examples include a monitor, printer, and speakers. . | Program File: A program file is a file that contains instructions for a computer program to execute. Examples include an executable file (.exe), a script file (.sh), and a batch file (.bat). . | Program Code: Program code is a set of instructions written in a programming language that tells a computer what to do. . | Processes: A process is a program that is currently running on a computer. . | Ports: A port is a physical interface on a computer that allows it to connect to other devices. Examples include USB ports, HDMI ports, and Ethernet ports. Ports . | Data File: A data file is a file that contains information that can be used by a computer program. Examples include a text file (.txt), a spreadsheet file (.xls), and an image file (.jpg). . | Inspect Running Code: Inspecting running code allows programmers to monitor the behavior of their programs as they run. . | Inspect Variables: Inspecting variables allows programmers to view the current values of variables in their programs. . | . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | . Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. . Path - A sequence of directly connected computing devices that begins at the sender and ends at the receiver. . | Route - The process of finding a path from sender to receiver. . | Computer System - A group of computing devices and programs working together for a common purpose. . | Computer Device - A physical artifact that can run a program, such as a computer, tablet, or smart sensor. . | Bandwidth - The maximum amount of data that can be sent in a fixed amount of time. . | Computer Network - A group of interconnected computing devices capable of sending or receiving data. | To analyze and measure path and latency, you can use the traceroute and ping commands from the Linux Terminal. . | traceroute - This command is used to trace the path that a packet takes from a sender to a receiver, showing the IP addresses of each device in the path. It can also provide information on the round-trip time (RTT) of packets to each device along the path. . | ping - This command is used to test the reachability of a device on a network and measure the latency of packets sent between devices. It sends packets to a specific IP address and measures the time it takes for a response to be received. | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions . | Essential Knowledge | The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprietary) communication protocols. (True) | Access to the internet depends on the ability to connect a computing device to an internet-connected device. (True) | A protocol is an agreed-upon set of rules that specify the behavior of a system. (True) | The protocols used in the internet are closed, which limits the number of devices that can connect to the internet. (False - they are open) | Routing on the internet is usually dynamic; it is not specified in advance. (True) | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. (True) | The internet was designed to be scalable. (True) | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. (True) | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. (True) | Packets always arrive at the destination in order. (False - they may arrive in order, out of order, or not at all) | IP, TCP, and UDP are common protocols used on the internet. (True) | The World Wide Web is a system of linked pages, programs, and files. (True) | HTTP is a protocol used by the World Wide Web. (True) | The World Wide Web is a separate system from the internet. (False - it uses the internet) | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://taiyoi.github.io/Compsci22/2023/04/05/AP_computers_networks.html",
            "relUrl": "/2023/04/05/AP_computers_networks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "MCQ Test",
            "content": ". Q1 What is an advantage of using lossless compression instead of lossy compression? | . The question is asking for a benefit of lossless compression over lossy compression. The correct answer is that lossless compression guarantees the reconstruction of the original data, whereas lossy compression does not. . . Q2 Which type of compression algorithm is best for reducing the size of a data file while still being able to restore it to its original version? | . The question is asking which compression algorithm is suitable for reducing the size of a data file while maintaining the ability to restore it to its original version. The correct answer is using a lossless compression algorithm. . Q3 What is a true statement about compression? | . The question is asking for a correct statement about compression. The scenario presented is a social media platform developer seeking advice on which type of image compression to use. The answer is that they should most likely use lossy compression since it provides less transmission time, although some information may be lost during compression. . Application of these questions These questions were designed to help differentiate between lossless and lossy image compression. Understanding the differences between the two can be useful in everyday life, especially for those who use social media regularly. . . Q1 Bookstore Spreadsheet | . In the Bookstore Spreadsheet question, an employee wants to find out the number of mystery books that cost less than $10 and have at least one copy in stock. The expression that would give the desired output is “(genre = “mystery”) AND ((1 ≤ num) AND (cost &lt; 10.00))”. This is because all of the given data needs to be considered, and using OR statements would not give the desired result. . . Q2 Clothing store sales information | . The Clothing Store Sales Information question involves a store owner who tracks dates, payment methods, number of items, and dollars paid for every transaction. The question asks which statement is true during a 7-day period. The owner can easily track the number of items purchased over the 7-day period by adding up the number of items purchased each day. Although it does not seem directly related to programming, it is a straightforward problem to solve. . . Q3 Data files to contact customers who use batteries | . The Data Files to Contact Customers Who Use Batteries question involves a company that wants to use their data files to determine which customers would be the best fit to target in an email campaign for their rechargeable battery pack. The best approach would be to compare customer IDs to item purchase IDs to identify potential customers who may be interested in the product. . . Q4 Museum photograph spreadsheet | . The Museum Photograph Spreadsheet question involves a spreadsheet of information about photographs in a museum’s collection. The problem is to find which photographer took the oldest picture in the collection. The solution is to filter by photographer and sort by year or vice versa to get the years of each photo in order of the photographer who took them. . . Q5 Radio Show Spreadsheet | . The Radio Show Spreadsheet question involves a spreadsheet with information about the schedule for a college radio station, including show name, genre, day, start time, and end time. The problem is to count the number of shows that are both a talk show and on a Saturday or Sunday. The best expression to output a true statement would be “(genre = “talk”) AND ((day = “Saturday”) OR (day = “Sunday”))”. This is because both conditions must be met for a show to be included. . . Use of Databases to display animal information | . The Use of Databases to Display Animal Information question involves a preserve that wants to develop an interactive exhibit with information about each animal based on the guest’s selection. They have two databases of information available for the exhibit. The first database contains information about the animal’s name, classification, skin type, and thermoregulation, while the second database contains information about the animal’s name, lifestyle, average life span, and top speed. Both of these databases are necessary for the exhibit as they contain the specific data required to develop the interactive exhibit. .",
            "url": "https://taiyoi.github.io/Compsci22/2023/04/02/MCQ-Test-4.html",
            "relUrl": "/2023/04/02/MCQ-Test-4.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "DNS setting up nighthawk",
            "content": "Lesson plan . Lesson Plan: AWS and DNS . Objective: Students will learn how to use Amazon Web Services (AWS) to set up a domain name system (DNS) and configure DNS records. . Materials: . AWS account Access to the AWS Management Console Basic understanding of DNS Prerequisites: . Basic knowledge of networking and DNS Familiarity with AWS Management Console Lesson Plan: . Introduction to AWS and DNS (10 minutes) . Brief overview of AWS and its services | Explanation of DNS and its importance in web applications | . Setting up a DNS Zone (15 minutes) . Log in to the AWS Management Console | Navigate to Route 53 service | Click &quot;Create Hosted Zone&quot; | Enter a domain name and click &quot;Create&quot; | Review the hosted zone details and take note of the nameservers | Configuring DNS Records (25 minutes) | Navigate to the hosted zone created in step 2 | Click &quot;Create Record Set&quot; | Enter the record name, type, and value | Click &quot;Create&quot; | Repeat for additional records | Test the records using a DNS lookup tool | . Code Snippets (30 minutes) . Provide students with code snippets for automating DNS record creation in AWS using the AWS SDK | Guide students through setting up and configuring the SDK on their local machines | Demonstrate how to use the SDK to create and modify DNS records Conclusion (10 minutes) | Recap the importance of DNS in web applications | Discuss the benefits of automating DNS record creation in AWS | Encourage students to explore other AWS services and incorporate DNS in their future projects | . Code Snippet: Here is an example of creating a DNS record in AWS Route 53 using the AWS SDK for Python: . import boto3 # Create a Route 53 client client = boto3.client(&#39;route53&#39;) # Define the hosted zone ID hosted_zone_id = &#39;YOUR_HOSTED_ZONE_ID&#39; # Define the new record set record_set = { &#39;Name&#39;: &#39;example.com&#39;, &#39;Type&#39;: &#39;A&#39;, &#39;TTL&#39;: 300, &#39;ResourceRecords&#39;: [ { &#39;Value&#39;: &#39;192.0.2.1&#39; } ] } # Create the record set response = client.change_resource_record_sets( HostedZoneId=hosted_zone_id, ChangeBatch={ &#39;Changes&#39;: [ { &#39;Action&#39;: &#39;CREATE&#39;, &#39;ResourceRecordSet&#39;: record_set } ] } ) # Print the response print(response) . Plan For The Hacks. . For the hacks, it will be very simple... | The student will just be creating an AWS account and taking a screen shot of that. | Inside of the AWS, they will be configuring a record and using Postman to test the table. | . Grading . I will just be grading this on completion but if you go beyond and create a routing method for the DNS, I will award extra points. .",
            "url": "https://taiyoi.github.io/Compsci22/2023/03/31/DNS.html",
            "relUrl": "/2023/03/31/DNS.html",
            "date": " • Mar 31, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python, the built-in implementation of a hashtable is called a &quot;dictionary&quot;. . The typical time complexity of a hashtable is O(1) in the average case for lookup, insertion, and deletion operations. However, in the worst-case scenario where there are hash collisions and many elements map to the same index in the underlying array, the time complexity can degrade to O(n), where n is the number of elements in the hashtable. To mitigate this, most hashtable implementations use techniques like chaining or open addressing to handle collisions. . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # In the output of the code, you&#39;ll notice that the duplicate elements from the list [1, 2, 3, 2, 1] are removed, and the resulting set contains only unique elements [1, 2, 3]. This is because sets only contain unique elements, and the set() function removes duplicates when creating a set from a list or other iterable. # Sets are related to hashtables/HashMaps because both use a hash function to efficiently retrieve and store elements. In sets, the hash function is used to determine the location of an element in the set, while in hashtables/HashMaps, the hash function is used to map a key to an index in the underlying array. Both data structures offer fast lookup times, making them useful for storing and retrieving large amounts of data. Additionally, both data structures require that their elements be hashable in order to use the hash function. . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . I see the dictionary and list data structures, list for the genres, dictionary for the tracks. . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . Both the above methods work. They do the same thing. . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . You can get specific tracks by using indexes. . lover_album[&quot;producer&quot;] = [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] # What can you change to make sure there are no duplicate producers? # # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]} . To make sure there are no duplicates, you can change it to be a set. In the above code, you can see that when I change it to be set, then there is only one Taylor Swift in the producers list because it removed the duplicates! . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;}, &#39;producer&#39;: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]} . You can use the append function to add a genre to the genres list within the dictionary. . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # # . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;] tracks: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} producer: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] . In the above code, you can see that I printed out the tracks in a readable format. I even included the track number. . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # # . [&#39;Pop&#39;, &#39;Synth-pop&#39;] . To make this code segment better, you can give some options and give clearer errors. For instance, &quot;your option was not a valid choice, please select a valid choice.&quot; And in general, there is no error checking which is not very optimal. . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | . Starboy_album = { &quot;title&quot;: &quot;Starboy&quot;, &quot;artist&quot;: &quot;The Weeknd&quot;, &quot;year&quot;: 2016, &quot;genre&quot;: [&quot;Rap&quot;, &quot;Chill&quot;], &quot;tracks&quot;: { 1: [&quot;Starboy&quot;, 9], 2: [&quot;Party Monster&quot;, 4], 3: [&quot;False Alarm&quot;, 10], 4: [&quot;Reminder&quot;, 6], 5: [&quot;Rockin&quot;, 10], 6: [&quot;Secrets&quot;, 8], 7: [&quot;True colors&quot;, 5], 8: [&quot;Stargirl interlude&quot;, 7], 9: [&quot;sidewalks&quot;, 9], 10: [&quot;Sixfeet under&quot;, 8], 11: [&quot;Love to lay&quot;, 6], 12: [&quot;A lonely night&quot;, 7], 13: [&quot;Attention&quot;, 9], 14: [&quot;Ordinary life&quot;, 8], 15: [&quot;Nothing without you&quot;, 9], 16: [&quot;All I know&quot;, 10], 17: [&quot;Die for you&quot;, 6], 18: [&quot;I feel it coming&quot;, 6] } } # Printing the dictionary print(Starboy_album) . {&#39;title&#39;: &#39;Starboy&#39;, &#39;artist&#39;: &#39;The Weeknd&#39;, &#39;year&#39;: 2016, &#39;genre&#39;: [&#39;Rap&#39;, &#39;Chill&#39;], &#39;tracks&#39;: {1: [&#39;Starboy&#39;, 9], 2: [&#39;Party Monster&#39;, 4], 3: [&#39;False Alarm&#39;, 10], 4: [&#39;Reminder&#39;, 6], 5: [&#39;Rockin&#39;, 10], 6: [&#39;Secrets&#39;, 8], 7: [&#39;True colors&#39;, 5], 8: [&#39;Stargirl interlude&#39;, 7], 9: [&#39;sidewalks&#39;, 9], 10: [&#39;Sixfeet under&#39;, 8], 11: [&#39;Love to lay&#39;, 6], 12: [&#39;A lonely night&#39;, 7], 13: [&#39;Attention&#39;, 9], 14: [&#39;Ordinary life&#39;, 8], 15: [&#39;Nothing without you&#39;, 9], 16: [&#39;All I know&#39;, 10], 17: [&#39;Die for you&#39;, 6], 18: [&#39;I feel it coming&#39;, 6]}} .",
            "url": "https://taiyoi.github.io/Compsci22/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "DNS and setting up nighthawk service",
            "content": "Why should you use the Cloud, DNS, and AWS? . In today&#39;s fast-paced digital world, having a reliable and scalable infrastructure is crucial for the success of any business. Amazon Web Services (AWS) provides a cloud platform that allows businesses to easily deploy and manage their applications and infrastructure. DNS (Domain Name System) is also an important component of any IT infrastructure as it translates human-readable domain names into IP addresses that computers use to identify each other on the internet. In this guide, we will explore how to set up a nighthawk service using AWS and DNS. . Setting up nighthawk service using AWS: . Step 1: Create an EC2 instance | . The first step in setting up a nighthawk service using AWS is to create an EC2 instance. An EC2 instance is a virtual machine that runs on AWS infrastructure. To create an EC2 instance, follow these steps: . Login to your AWS account. | Click on the EC2 service. | Click on the &quot;Launch Instance&quot; button. | Choose an Amazon Machine Image (AMI) to use for your instance. | Choose the instance type that meets your needs. | Configure your instance by selecting a VPC (Virtual Private Cloud), subnet, and security group. | Review and launch your instance. | -- Step 2: Install and configure nighthawk Once your EC2 instance is up and running, the next step is to install and configure nighthawk. Nighthawk is a powerful load testing tool that can be used to measure the performance of web applications. To install and configure nighthawk on your EC2 instance, follow these steps: . Connect to your EC2 instance using SSH. . | Install nighthawk by running the following command: sudo apt-get install nighthawk . | Once nighthawk is installed, you can configure it by creating a configuration file. Here&#39;s an example configuration file: . | { &quot;requests&quot;: [ { &quot;url&quot;: &quot;https://www.example.com/&quot;, &quot;connections&quot;: 10, &quot;duration&quot;: 10, &quot;timeout&quot;: 5000 } ] } . This configuration file will make 10 connections to &quot;https://www.example.com/&quot; for 10 seconds and will time out after 5 seconds. . Step 3: Set up DNS for your nighthawk service The final step in setting up your nighthawk service using AWS is to set up DNS. DNS allows you to use a human-readable domain name to access your nighthawk service instead of an IP address. To set up DNS, follow these steps: | . Go to the Route 53 service in your AWS console. | Click on &quot;Create Hosted Zone&quot; and enter your domain name. | Create an &quot;A&quot; record for your nighthawk service by clicking on &quot;Create Record Set&quot; and selecting &quot;A&quot; as the record type. | Enter your EC2 instance&#39;s public IP address as the value for your &quot;A&quot; record. | Click &quot;Create Record Set&quot; to save your changes. | Conclusion . In this guide, we have explored how to set up a nighthawk service using AWS and DNS. By using AWS, you can easily create and manage your infrastructure, and by using DNS, you can make your nighthawk service accessible using a human-readable domain name. With these tools, you can easily measure the performance of your web applications and ensure that they are running smoothly. .",
            "url": "https://taiyoi.github.io/Compsci22/2023/03/26/DNS-setting-up.html",
            "relUrl": "/2023/03/26/DNS-setting-up.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource ResourceWhat is a database schema? A database schema is how the data in a database is saved. The schema can be considered the metadata. What is the purpose of identity Column in SQL database? Identity columns help to identify each specific row of the database. This ensures that each row has its own identity column. What is the purpose of a primary key in SQL database? A primary key in a SQL database is something which can uniquely identify the row of a database. For example, the users database uses id for the primary key. For the coders, we use the uid as the primary key. What are the Data Types in SQL table? The data types in a SQL table include integers, floats, and strings. . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? A connection object is an object which allows us to connect with the sqlite db to be able to interact with it. Same for cursor object? A cursor object is an object which allows us to search through the sql database. These allow us to work with sqlite db. Look at conn object and cursor object in VSCode debugger. What attributes are in the object? Attributes in the object include Is &quot;results&quot; an object? How do you know? &quot;results&quot; is an object. We know this because it is a collection of information and has some methods. . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$4SVJ7kkCCyNJxzYa$0056ba674022a101e3c95c98a6def113cce46fd9b9377f49585a922613b788ac&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$3JulSZn8vBMTlxaT$a77baa05b96bf19871e0d3113fc289591dc6aba36e1bef124948db69e2a4a8aa&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$7G5aEIDn3LltlNqg$134aac6e5013c96702e3603e768757acc2c1aa75d274c0b3823e4e3407c00e0c&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$bWJ0fVwBCyclQ6LK$7adc1fe3834c4d82c5fdda4db0005fb344d788bd8e60e3150cd34b793eb76d96&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$DlTpEGT8fpZfh5hp$bc07f588eb5cbc53231ffd5b790293bbe33cd4a950ad407b700b2018068dd8a5&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$FJZ1pI4Ic5DwFkd1$ec2f2b3dcba7bf94aff1c2251e0a0fdac98192ce90e0b97d8faa86ae54e69e59&#39;, &#39;1921-10-21&#39;) (7, &#39;12&#39;, &#39;12&#39;, &#39;sha256$wBLMtxfTU9F84C2y$aa2a3a90a4eb78e5078f0fbca65960dcee76afbbf843beba9c1fe594fc5f7c69&#39;, &#39;2023-03-15&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compare create() in both SQL lessons. What is better or worse in the two implementations? The code for this create is much shorter. It requires the conn and cursor objects to be opened and closed. The cursor must execute a code which takes all of the variables and adds it to the table. Explain purpose of SQL INSERT. Is this the same as User init? SQL INSERT allows rows to be added to an SQL database table. The User init function allows a dataset which is defined to be able to added to an SQL database. This serves a similar purpose. . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password What does the hacked part do? The hacked part of the update function outputs a message to the user if the length of the password is too short. This serves as authentication for the user to make sure that a password is long enough for security purposes. Explain try/except, when would except occur? Try and except work as things which check if certain code is running/working. Try runs if the code is working smoothly, and in this case serves to update the password. Except occurs if there is an error with the connection and cursor with the database. This serves as a good way to check errors if there is something wrong with the code. What code seems to be repeated in each of these examples to point, why is it repeated? Code that seems to be repeated include import sqlite3, defining the conn and cursor methods, cursor execute, conn.commit(), and conn and cursor close. This code seems to be repeated because it is required to connect and use the cursor method in the database. cursor.execute() seems to run the wanted code, whether it is update, delete, read, etc. conn.commit() appears that it commits the changes to the database in order to make the changes permanent. The closing of cursor and conn appears to be present because it is important be able to close the working connections and cursors in order to be able to have different ones. This is especially important when working with servers because it makes sure to have orderly code and prevents resources from being used unnecessarily. . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. Is DELETE a dangerous operation? Why? DELETE can be a dangerous operation because it can remove information from the database, and if placed in the wrong hands, they could delete important information by accident. However, delete is also necessary in order to maintain a clean database with proper records. In the print statemements, what is the &quot;f&quot; and what does {uid} do? In the print statements, the &quot;f&quot; and {uid} allow the coder to include the selected uid without having to add multiple strings in the print statement. It allows for easy replacement and making a statement which uses the variable which the user called for. . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? The menu repeats so the user has access to the functions multiple times if they want, instead of having to restart the code cell every time they want to try a new function. Could you refactor this menu? Make it work with a List? This menu could be refactored, to reduce the number of elif statements had. Refactoring allows the code to be cleaned up and become more organized. The menu could be held in a list or dictionary and based on the output, the specific function would occur. . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$4SVJ7kkCCyNJxzYa$0056ba674022a101e3c95c98a6def113cce46fd9b9377f49585a922613b788ac&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$3JulSZn8vBMTlxaT$a77baa05b96bf19871e0d3113fc289591dc6aba36e1bef124948db69e2a4a8aa&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$7G5aEIDn3LltlNqg$134aac6e5013c96702e3603e768757acc2c1aa75d274c0b3823e4e3407c00e0c&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$bWJ0fVwBCyclQ6LK$7adc1fe3834c4d82c5fdda4db0005fb344d788bd8e60e3150cd34b793eb76d96&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$DlTpEGT8fpZfh5hp$bc07f588eb5cbc53231ffd5b790293bbe33cd4a950ad407b700b2018068dd8a5&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$FJZ1pI4Ic5DwFkd1$ec2f2b3dcba7bf94aff1c2251e0a0fdac98192ce90e0b97d8faa86ae54e69e59&#39;, &#39;1921-10-21&#39;) (7, &#39;12&#39;, &#39;12&#39;, &#39;sha256$wBLMtxfTU9F84C2y$aa2a3a90a4eb78e5078f0fbca65960dcee76afbbf843beba9c1fe594fc5f7c69&#39;, &#39;2023-03-15&#39;) (8, &#39;taiyo&#39;, &#39;tio&#39;, &#39;qwe&#39;, &#39;11-19-06&#39;) (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$4SVJ7kkCCyNJxzYa$0056ba674022a101e3c95c98a6def113cce46fd9b9377f49585a922613b788ac&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$3JulSZn8vBMTlxaT$a77baa05b96bf19871e0d3113fc289591dc6aba36e1bef124948db69e2a4a8aa&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$7G5aEIDn3LltlNqg$134aac6e5013c96702e3603e768757acc2c1aa75d274c0b3823e4e3407c00e0c&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$bWJ0fVwBCyclQ6LK$7adc1fe3834c4d82c5fdda4db0005fb344d788bd8e60e3150cd34b793eb76d96&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$DlTpEGT8fpZfh5hp$bc07f588eb5cbc53231ffd5b790293bbe33cd4a950ad407b700b2018068dd8a5&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$FJZ1pI4Ic5DwFkd1$ec2f2b3dcba7bf94aff1c2251e0a0fdac98192ce90e0b97d8faa86ae54e69e59&#39;, &#39;1921-10-21&#39;) (7, &#39;12&#39;, &#39;12&#39;, &#39;sha256$wBLMtxfTU9F84C2y$aa2a3a90a4eb78e5078f0fbca65960dcee76afbbf843beba9c1fe594fc5f7c69&#39;, &#39;2023-03-15&#39;) (8, &#39;taiyo&#39;, &#39;tio&#39;, &#39;qwe&#39;, &#39;11-19-06&#39;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation .",
            "url": "https://taiyoi.github.io/Compsci22/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "4A Notes",
            "content": "Setters and Getters . Setters and getters are methods used in object-oriented programming to control access to the properties of an object. . | A setter is a method that sets the value of a property, while a getter is a method that retrieves the value of a property. . | Setters and getters provide a layer of abstraction between the object’s internal implementation and external use. . | Setters and getters can be used to restrict the values that can be assigned to a property. For example, a setter can validate that a value is within a certain range before assigning it to a property. . | Setters and getters can also be used to hide the implementation details of a property. For example, a getter can retrieve the value of a property from a database or other source without exposing the details of how the value is retrieved. . | In many programming languages, setters and getters are implemented using special syntax, such as the use of property accessors or the use of the “set” and “get” keywords. . | When using setters and getters, it’s important to follow best practices for naming conventions. For example, a setter method should typically be named with the prefix “set” followed by the name of the property, while a getter method should be named with the prefix “get” followed by the name of the property. . | Setters and getters can be used in a wide range of programming contexts, including desktop applications, web applications, and mobile applications. . | .",
            "url": "https://taiyoi.github.io/Compsci22/2023/03/14/4a-Notes.html",
            "relUrl": "/2023/03/14/4a-Notes.html",
            "date": " • Mar 14, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "2.4 A Notes . College Board talks about ideas like: . Program Usage: This refers to the way in which programs are used to process information in an iterative and interactive manner. . | Managing Data: This involves classifying data as part of the process of using programs, and organizing data files in a table. . | Insight: The College Board suggests that insight and knowledge can be obtained from digitally represented information. . | Filter Systems: This refers to the tools used to find information and recognize patterns within data. . | Application: The College Board gives an example of an employee wanting to count the number of books in two databases that the preserve has. . | . PBL, Databases, Iterative/OOP: . Iterative: Refers to a process in which a sequence of instructions or code is repeated until a specific end result is achieved. . | OOP: An approach to computer programming in which software design is based on objects or data, rather than functions and logic. . | SQL: Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data, often used in managing databases. . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. . | Flask app object: I have observed the Flask app object working in various web development projects. Flask is a popular web framework for building web applications with Python. The Flask app object is the central point of the application, and is used to configure the application and define the application routes. Its purpose is to create and configure the Flask application, including any extensions or third-party libraries, and handle the routing of incoming requests. . | SQLAlchemy db object: . | . I have also observed the SQLAlchemy db object in various Python-based web development projects. SQLAlchemy is a popular Object Relational Mapper (ORM) for working with databases in Python. The db object is used to represent the database connection, and is used to interact with the database, including creating tables, querying data, and performing transactions. Its purpose is to provide a high-level, object-oriented interface for working with databases, and to abstract away the details of the underlying database engine, allowing developers to focus on their application logic rather than low-level database operations. . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . class User: The class User is a Python class that represents a user entity in an application. It is used in many web applications to store user-related information, such as their name, email, and password. Its purpose is to provide a blueprint for creating user objects that can be stored and retrieved from a database. . | db.Model inheritance: . | . The db.Model inheritance refers to the inheritance of the db.Model class from the SQLAlchemy library. In Python-based web applications, this inheritance is commonly used to define database models for different entities, such as users, posts, and comments. The purpose of inheriting from the db.Model class is to provide a set of predefined methods and attributes that enable interaction with the underlying database. By using this inheritance, developers can create more efficient and streamlined code for database operations. . init method: | . The init method is a special method in Python classes that is called when an object of the class is created. In database models, this method is commonly used to initialize the attributes of an object with default or user-defined values. The purpose of the init method is to provide a way to create instances of the class with specific attributes, making it easier to work with the class in other parts of the application. . @property, @.setter:&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt; These are Python decorators that are commonly used in database models. The @property decorator is used to define a getter method for a class attribute, while the @.setter decorator is used to define a setter method for a specific column in the database. The purpose of these decorators is to provide a more Pythonic way of working with class attributes and database columns, and to enable additional functionality, such as validation or formatting, when getting or setting attributes.&lt;/p&gt; create, read, update, delete methods: | . These are commonly used methods in database models that represent the basic operations that can be performed on a database entity. The create method is used to create a new entity in the database, the read method is used to retrieve one or more entities from the database, the update method is used to update an existing entity in the database, and the delete method is used to remove an entity from the database. The purpose of these methods is to provide a way to interact with the database in a standard way that is easy to understand and maintain. By using these methods, developers can create more efficient and streamlined code for database operations. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL # defining the template the class of Users, class definition template, helps us create objects which are of the type User, template for future object class Restaurant_B(db.Model): __tablename__ = &#39;Restaurant_business&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _Restaurant = db.Column(db.String(255), unique=True, nullable=False) _Sales = db.Column(db.String(255), unique=False, nullable=False) _Avg = db.Column(db.String(255), unique=False, nullable=False) _City = db.Column(db.String(255), unique=False, nullable=False) _State = db.Column(db.String(255), unique=False, nullable=False) _Meals = db.Column(db.String, unique=False) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, Restaurant, Sales, Avg, City, State, Meals): self._Restaurant = Restaurant # variables with self prefix become part of the object, self._Sales = Sales self._Avg = Avg self._City = City self._State = State self._Meals = Meals # a name getter method, extracts name from object @property def Restaurant(self): return self._Restaurant # a setter function, allows name to be updated after initial object creation @Restaurant.setter def Restaurant(self, Restaurant): self._Restaurant = Restaurant @property def Sales(self): return self._Sales # a setter function, allows name to be updated after initial object creation @Sales.setter def Sales(self, Sales): self._Sales = Sales @property def Avg(self): return self._Avg # a setter function, allows name to be updated after initial object creation @Avg.setter def Avg(self, Avg): self._Avg = Avg @property def City(self): return self._City # a setter function, allows name to be updated after initial object creation @City.setter def City(self, City): self._City = City @property def State(self): return self._State # a setter function, allows name to be updated after initial object creation @State.setter def State(self, State): self._State = State @property def Meals(self): return self._Meals @Meals.setter def Meals(self, Meals): self._Meals = Meals # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;Restaurant&quot; : self.Restaurant, &quot;Sales&quot; : self.Sales, &quot;Avg&quot; : self.Avg, &quot;City&quot; : self.City, &quot;State&quot;: self.State, &quot;Meals&quot;: self.Meals } # CRUD update: updates user name, password, phone # returns self def update(self, Restaurant, Sales, Avg, City, State, Meals): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(Restaurant) &gt; 0: self.Restaurant = Restaurant if len(Sales) &gt; 0: self.Sales = Sales if len(Avg) &gt; 0: self.Avg = Avg if len(City) &gt; 0: self.City = City if len(State) &gt; 0: self.State = State if len(Meals) &gt; 0: self.Meals = Meals db.session.add(self) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Create All Tables from db Object: Creating all tables from the db object involves using SQLAlchemy&#39;s create_all method to generate the necessary database tables based on the defined models. This method scans the application for all models that inherit from db.Model and creates the corresponding tables in the database. The purpose of this method is to automate the process of creating database tables, rather than manually creating them in the database. This method can be used during the application&#39;s initialization to ensure that all the required tables exist before the application starts serving requests. . | User Object Constructors: . | . In Python, object constructors are special methods that are called when an object is created. User object constructors are used to initialize user objects with default or user-defined values. They are used to set initial attributes for the user object, such as the user&#39;s name, email, and password. The purpose of the user object constructors is to provide a way to create user objects with specific attributes that can be used throughout the application. . Try / Except: | . The try/except statement in Python is used to handle exceptions or errors that may occur during the execution of code. The try block contains the code that may raise an exception, while the except block contains the code that should be executed if an exception occurs. The purpose of the try/except statement is to gracefully handle exceptions, preventing the application from crashing due to unhandled errors. This is particularly useful in web applications, where users may interact with the application in unpredictable ways, and errors can occur at any time. By using try/except statements, developers can catch and handle errors, providing a better user experience and preventing security vulnerabilities. . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initRestaurant_business(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; R1 = Restaurant_B(Restaurant=&#39;Komodo&#39;, Sales=&#39;41,000,000&#39;, Avg=&#39;115&#39;, City=&#39;Miami&#39;, State=&#39;Fla.&#39;, Meals=&#39;285,000&#39;) R2 = Restaurant_B(Restaurant=&#39;The Boathouse Orlando&#39;, Sales=&#39;39,863,628&#39;, Avg=&#39;44&#39;, City=&#39;Fla.&#39;, State=&#39;25&#39;, Meals=&#39;921,785&#39;) R3 = Restaurant_B(Restaurant=&#39;Swan&#39;, Sales=&#39;31,000,000&#39;, Avg=&#39;85&#39;, City=&#39;Miami&#39;,State=&#39;Fla.&#39;, Meals=&#39;185,000&#39;) R4 = Restaurant_B(Restaurant=&#39;Maple &amp; Ash (Chicago)&#39;, Sales=&#39;30,286,684&#39;, Avg=&#39;106&#39;, City=&#39;Chicago&#39;, State=&#39;Ill.&#39;, Meals=&#39;285,714&#39;) R5 = Restaurant_B(Restaurant=&#39;Mila&#39;, Sales=&#39;27,350,000&#39;, Avg=&#39;134&#39;, City=&#39;Miami Beach&#39;, State=&#39;Fla.&#39;, Meals=&#39;203,990&#39;) R6 = Restaurant_B(Restaurant=&#39;Alinea&#39;, Sales=&#39;27,072,500&#39;, Avg=&#39;650&#39;, City=&#39;Chicago&#39;, State=&#39;Ill.&#39;, Meals=&#39;41,650&#39;) R7 = Restaurant_B(Restaurant=&#39;CTop of the World&#39;, Sales=&#39;25,672,308&#39;, Avg=&#39;133&#39;, City=&#39;Las Vegas&#39;, State=&#39;Nev.&#39;, Meals=&#39;218,586&#39;) R8 = Restaurant_B(Restaurant=&#39;Shooters Waterfront&#39;, Sales=&#39;25,025,370&#39;, Avg=&#39;68&#39;, City=&#39;Fort Lauderdale&#39;, State=&#39;Fla.&#39;, Meals=&#39;419,972&#39;) R9 = Restaurant_B(Restaurant=&#39;Prime 112&#39;, Sales=&#39;24,750,000&#39;, Avg=&#39;155&#39;, City=&#39;Miami Beach&#39;, State=&#39;Fla.&#39;, Meals=&#39;210,000&#39;) R10 = Restaurant_B(Restaurant=&#39;Paddlefish&#39;, Sales=&#39;23,795,000&#39;, Avg=&#39;52&#39;, City=&#39;Orlando&#39;, State=&#39;Fla.&#39;, Meals=&#39;485,000&#39;) R11 = Restaurant_B(Restaurant=&#39;Capa&#39;, Sales=&#39;23,547,000&#39;, Avg=&#39;121&#39;, City=&#39;Orlando&#39;, State=&#39;Fla.&#39;, Meals=&#39;197,000&#39;) R12 = Restaurant_B(Restaurant=&#39;Maple &amp; Ash (Scottsdale)&#39;, Sales=&#39;23,487,122&#39;, Avg=&#39;95&#39;, City=&#39;Scottsdale&#39;, State=&#39;Ariz.&#39;, Meals=&#39;247,232&#39;) R13 = Restaurant_B(Restaurant=&#39;Commanders Palace&#39;, Sales=&#39;23,184,000&#39;, Avg=&#39;89&#39;, City=&#39;New Orleans&#39;, State=&#39;La.&#39;, Meals=&#39;264,000&#39; ) R14 = Restaurant_B(Restaurant=&#39;Taste of Texas&#39;, Sales=&#39;23,180,522&#39;, Avg=&#39;64&#39;, City=&#39;Houston&#39;, State=&#39;Texas&#39;, Meals=&#39;356,894&#39;) R15 = Restaurant_B(Restaurant=&#39;Joes Seafood, Prime Steak &amp; Stone Crab&#39;, Sales=&#39;22,477,000&#39;, Avg=&#39;94&#39;, City=&#39;Washington&#39;, State=&#39;N/A&#39;, Meals=&#39;255,000&#39;) Rest = [R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15] for R in Rest: try: object = R.create() print(f&quot;Added data for {object.Restaurant}&quot;) except IntegrityError: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist, duplicate email, or error: {R.Restaurant}&quot;) initRestaurant_business() . Added data for Komodo Added data for The Boathouse Orlando Added data for Swan Added data for Maple &amp; Ash (Chicago) Added data for Mila Added data for Alinea Added data for CTop of the World Added data for Shooters Waterfront Added data for Prime 112 Added data for Paddlefish Added data for Capa Added data for Maple &amp; Ash (Scottsdale) Added data for Commanders Palace Added data for Taste of Texas Added data for Joes Seafood, Prime Steak &amp; Stone Crab . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . User.query.filter_by: User.query.filter_by is a method in SQLAlchemy that is used to retrieve data from the database based on specific filter conditions. In this case, it is used to retrieve a specific user object from the database based on the value of one or more attributes, such as the user&#39;s email or ID. The purpose of this method is to provide a convenient way to retrieve data from the database that meets specific criteria. By using filter_by, developers can write more efficient code that retrieves only the data that is needed, rather than retrieving all data and filtering it in the application code. . | user.password: . | . user.password refers to the password attribute of a User object. This attribute is commonly used to store a user&#39;s password in a secure and encrypted format, such as using a hash function. The purpose of this attribute is to store the user&#39;s password securely, ensuring that it is not visible or easily accessible to anyone, including the application developers or database administrators. By storing passwords securely, applications can protect user accounts from unauthorized access and prevent security breaches. . def find_by_Restaurant(Restaurant): with app.app_context(): # ORM allows us to do query methods on our data # only returns the match to the first match to the database restaurant_B = Restaurant_B.query.filter_by(_Restaurant=Restaurant).first() return restaurant_B # returns user object . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . user.find_by_uid() and try/except: user.find_by_uid() is a method that is used to retrieve a user object from the database based on the user&#39;s ID. The purpose of this method is to provide a convenient way to retrieve user objects based on a unique identifier, such as an ID or email address. The try/except block is used to handle any errors that may occur during the execution of the method, such as if the user does not exist in the database. By using try/except, developers can catch and handle errors gracefully, providing a better user experience and preventing security vulnerabilities. . | user = User(...): . | . user = User(...) is a statement that creates a new user object with the specified attributes, such as the user&#39;s name, email, and password. The purpose of this statement is to create a new user object that can be saved to the database or used in the application code. . user.dob and try/except: | . user.dob refers to the date of birth attribute of a User object. The try/except block is used to handle any errors that may occur during the execution of the code that accesses this attribute, such as if the attribute is not set or is invalid. By using try/except, developers can catch and handle errors gracefully, providing a better user experience and preventing security vulnerabilities. . user.create() and try/except: | . user.create() is a method that is used to save a new user object to the database. The try/except block is used to handle any errors that may occur during the execution of the method, such as if the user object is invalid or if there is an error connecting to the database. By using try/except, developers can catch and handle errors gracefully, providing a better user experience and preventing security vulnerabilities. . def create(): # optimize user time to see if uid exists Restaurant = input(&quot;Enter a Restaurant name:&quot;) Dinner = find_by_Restaurant(Restaurant) try: print(&quot;Found n&quot;, Dinner.read()) return except: pass # keep going # request value that ensure creating valid object Sales = input(&quot;Enter the total sales:&quot;) Avg = input(&quot;Enter their average check:&quot;) City = input(&quot;Enter the City:&quot;) State = input(&quot;Enter the state:&quot;) Meals = input(&quot;Enter the total meals served:&quot;) # Initialize User object before date restaurant_B = Restaurant_B(Restaurant=Restaurant, Sales=Sales, Avg=Avg, City=City, State=State, Meals=Meals ) # write object to database with app.app_context(): try: object = restaurant_B.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {Restaurant}&quot;) create() . Created {&#39;id&#39;: 16, &#39;Restaurant&#39;: &#39;In-n-out&#39;, &#39;Sales&#39;: &#39;1200&#39;, &#39;Avg&#39;: &#39;30&#39;, &#39;City&#39;: &#39;San Diego&#39;, &#39;State&#39;: &#39;California&#39;, &#39;Meals&#39;: &#39;800000&#39;} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . User.query.all: User.query.all is a method that is used to retrieve all User objects from the database. The purpose of this method is to provide a convenient way to retrieve all User objects for use in the application code. The returned objects can be used for further processing, such as displaying them to the user or manipulating them in some way. . | json_ready assignment, google List Comprehension: . | . json_ready is a variable that is assigned the result of a list comprehension, which is a concise way to create a list in Python. The purpose of this variable is to create a list of dictionaries that can be easily converted to JSON format for use in a web application. List comprehension is used to create a list of dictionaries based on the User objects retrieved from the database, with each dictionary representing a User object and its attributes. The resulting list of dictionaries can be easily serialized to JSON format and sent to the client-side of a web application. . def read(): with app.app_context(): table = Restaurant_B.query.all() json_ready = [restaurant_B.read() for restaurant_B in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;Restaurant&#39;: &#39;Komodo&#39;, &#39;Sales&#39;: &#39;41,000,000&#39;, &#39;Avg&#39;: &#39;115&#39;, &#39;City&#39;: &#39;Miami&#39;, &#39;State&#39;: &#39;Fla.&#39;, &#39;Meals&#39;: &#39;285,000&#39;}, {&#39;id&#39;: 2, &#39;Restaurant&#39;: &#39;The Boathouse Orlando&#39;, &#39;Sales&#39;: &#39;39,863,628&#39;, &#39;Avg&#39;: &#39;44&#39;, &#39;City&#39;: &#39;Fla.&#39;, &#39;State&#39;: &#39;25&#39;, &#39;Meals&#39;: &#39;921,785&#39;}, {&#39;id&#39;: 3, &#39;Restaurant&#39;: &#39;Swan&#39;, &#39;Sales&#39;: &#39;31,000,000&#39;, &#39;Avg&#39;: &#39;85&#39;, &#39;City&#39;: &#39;Miami&#39;, &#39;State&#39;: &#39;Fla.&#39;, &#39;Meals&#39;: &#39;185,000&#39;}, {&#39;id&#39;: 4, &#39;Restaurant&#39;: &#39;Maple &amp; Ash (Chicago)&#39;, &#39;Sales&#39;: &#39;30,286,684&#39;, &#39;Avg&#39;: &#39;106&#39;, &#39;City&#39;: &#39;Chicago&#39;, &#39;State&#39;: &#39;Ill.&#39;, &#39;Meals&#39;: &#39;285,714&#39;}, {&#39;id&#39;: 5, &#39;Restaurant&#39;: &#39;Mila&#39;, &#39;Sales&#39;: &#39;27,350,000&#39;, &#39;Avg&#39;: &#39;134&#39;, &#39;City&#39;: &#39;Miami Beach&#39;, &#39;State&#39;: &#39;Fla.&#39;, &#39;Meals&#39;: &#39;203,990&#39;}, {&#39;id&#39;: 6, &#39;Restaurant&#39;: &#39;Alinea&#39;, &#39;Sales&#39;: &#39;27,072,500&#39;, &#39;Avg&#39;: &#39;650&#39;, &#39;City&#39;: &#39;Chicago&#39;, &#39;State&#39;: &#39;Ill.&#39;, &#39;Meals&#39;: &#39;41,650&#39;}, {&#39;id&#39;: 7, &#39;Restaurant&#39;: &#39;CTop of the World&#39;, &#39;Sales&#39;: &#39;25,672,308&#39;, &#39;Avg&#39;: &#39;133&#39;, &#39;City&#39;: &#39;Las Vegas&#39;, &#39;State&#39;: &#39;Nev.&#39;, &#39;Meals&#39;: &#39;218,586&#39;}, {&#39;id&#39;: 8, &#39;Restaurant&#39;: &#39;Shooters Waterfront&#39;, &#39;Sales&#39;: &#39;25,025,370&#39;, &#39;Avg&#39;: &#39;68&#39;, &#39;City&#39;: &#39;Fort Lauderdale&#39;, &#39;State&#39;: &#39;Fla.&#39;, &#39;Meals&#39;: &#39;419,972&#39;}, {&#39;id&#39;: 9, &#39;Restaurant&#39;: &#39;Prime 112&#39;, &#39;Sales&#39;: &#39;24,750,000&#39;, &#39;Avg&#39;: &#39;155&#39;, &#39;City&#39;: &#39;Miami Beach&#39;, &#39;State&#39;: &#39;Fla.&#39;, &#39;Meals&#39;: &#39;210,000&#39;}, {&#39;id&#39;: 10, &#39;Restaurant&#39;: &#39;Paddlefish&#39;, &#39;Sales&#39;: &#39;23,795,000&#39;, &#39;Avg&#39;: &#39;52&#39;, &#39;City&#39;: &#39;Orlando&#39;, &#39;State&#39;: &#39;Fla.&#39;, &#39;Meals&#39;: &#39;485,000&#39;}, {&#39;id&#39;: 11, &#39;Restaurant&#39;: &#39;Capa&#39;, &#39;Sales&#39;: &#39;23,547,000&#39;, &#39;Avg&#39;: &#39;121&#39;, &#39;City&#39;: &#39;Orlando&#39;, &#39;State&#39;: &#39;Fla.&#39;, &#39;Meals&#39;: &#39;197,000&#39;}, {&#39;id&#39;: 12, &#39;Restaurant&#39;: &#39;Maple &amp; Ash (Scottsdale)&#39;, &#39;Sales&#39;: &#39;23,487,122&#39;, &#39;Avg&#39;: &#39;95&#39;, &#39;City&#39;: &#39;Scottsdale&#39;, &#39;State&#39;: &#39;Ariz.&#39;, &#39;Meals&#39;: &#39;247,232&#39;}, {&#39;id&#39;: 13, &#39;Restaurant&#39;: &#39;Commanders Palace&#39;, &#39;Sales&#39;: &#39;23,184,000&#39;, &#39;Avg&#39;: &#39;89&#39;, &#39;City&#39;: &#39;New Orleans&#39;, &#39;State&#39;: &#39;La.&#39;, &#39;Meals&#39;: &#39;264,000&#39;}, {&#39;id&#39;: 14, &#39;Restaurant&#39;: &#39;Taste of Texas&#39;, &#39;Sales&#39;: &#39;23,180,522&#39;, &#39;Avg&#39;: &#39;64&#39;, &#39;City&#39;: &#39;Houston&#39;, &#39;State&#39;: &#39;Texas&#39;, &#39;Meals&#39;: &#39;356,894&#39;}, {&#39;id&#39;: 15, &#39;Restaurant&#39;: &#39;Joes Seafood, Prime Steak &amp; Stone Crab&#39;, &#39;Sales&#39;: &#39;22,477,000&#39;, &#39;Avg&#39;: &#39;94&#39;, &#39;City&#39;: &#39;Washington&#39;, &#39;State&#39;: &#39;N/A&#39;, &#39;Meals&#39;: &#39;255,000&#39;}, {&#39;id&#39;: 16, &#39;Restaurant&#39;: &#39;In-n-out&#39;, &#39;Sales&#39;: &#39;1200&#39;, &#39;Avg&#39;: &#39;30&#39;, &#39;City&#39;: &#39;San Diego&#39;, &#39;State&#39;: &#39;California&#39;, &#39;Meals&#39;: &#39;800000&#39;}] . def updateq(): Restaurant = input(&quot;Enter the name of the Restaurant to update: &quot;) Dinner = find_by_Restaurant(Restaurant) # Request new values for the QB attributes Sales = input(&quot;Enter their Total Sales : &quot;) Avg = input(&quot;Enter their Average Checks : &quot;) City = input(&quot;Enter their City season: &quot;) State = input(&quot;Enter Their state: &quot;) Meals = input(&quot;Enter their total Meals: &quot;) if Dinner is not None: with app.app_context(): Dinner.update(Restaurant=Restaurant, Sales=Sales, Avg=Avg, City=City, State=State, Meals=Meals) print(&quot;Updated Restaurant&quot;, Restaurant) else: print(&quot;error&quot;) updateq() . Updated Restaurant In-n-out . def delete(): # optimize user time to see if uid exists Restaurant = input(&quot;Enter a Restaurant name:&quot;) Dinner = find_by_Restaurant(Restaurant) try: pass except: Restaurant = input(&quot;Try again, that was not a valid Restaurant:&quot;) with app.app_context(): try: object = Dinner.delete() print(&quot;Deleted n&quot;, Dinner) except: # error raised if object not created print(&quot;Unknown error uid {Restaurant}&quot;) delete() . Deleted {&#34;id&#34;: 16, &#34;Restaurant&#34;: &#34;In-n-out&#34;, &#34;Sales&#34;: &#34;5000&#34;, &#34;Avg&#34;: &#34;30&#34;, &#34;City&#34;: &#34;San Diego&#34;, &#34;State&#34;: &#34;California&#34;, &#34;Meals&#34;: &#34;100000&#34;} . def crudmenu(): selection = input(&quot;Enter a letter to select your option --&gt; c: Create, r: Read, u: Update, d: delete&quot;) if selection.lower() == &quot;c&quot;: create() elif selection.lower() == &quot;r&quot;: with app.app_context(): table = Restaurant_B.query.all() json_ready = [restaurant_B.read() for restaurant_B in table] return json_ready elif selection.lower() == &quot;u&quot;: updateq() elif selection.lower() == &quot;d&quot;: delete() else: selection = input(&quot;Please enter a valid letter --&gt; c: Create, r: Read, u: Update, D: delete&quot;) crudmenu() . Updated Restaurant In-n-out . The update() function takes an id parameter to identify which user to update, and a data parameter containing the updated user data. It first retrieves the user from the database using the filter_by() method and the provided id. If the user exists, it then calls the update() method on the user object, passing in the data parameter. The update() method is a custom method you would need to define on your User model that updates the user&#39;s attributes based on the provided data. Finally, the function commits the changes to the database and returns the updated user data in JSON format. . The delete() function is similar to the update() function, but instead of updating the user, it deletes the user from the database. If the user exists, it calls the delete() method on the user object, commits the changes, and returns the deleted user data in JSON format. If the user does not exist, it returns None. . Note that you would also need to define the update() and delete() methods on your User model in order to use these functions. . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | . &lt;/div&gt; . | .",
            "url": "https://taiyoi.github.io/Compsci22/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "2.2-2.3 College Board",
            "content": "Data Compression Quiz . . Q1 What is an advantage of using lossless compression instead of lossy compression? | . The question is asking for a benefit of lossless compression over lossy compression. The correct answer is that lossless compression guarantees the reconstruction of the original data, whereas lossy compression does not. . Q2 Which type of compression algorithm is best for reducing the size of a data file while still being able to restore it to its original version? | . The question is asking which compression algorithm is suitable for reducing the size of a data file while maintaining the ability to restore it to its original version. The correct answer is using a lossless compression algorithm. . Q3 What is a true statement about compression? | . The question is asking for a correct statement about compression. The scenario presented is a social media platform developer seeking advice on which type of image compression to use. The answer is that they should most likely use lossy compression since it provides less transmission time, although some information may be lost during compression. . Application of these questions These questions were designed to help differentiate between lossless and lossy image compression. Understanding the differences between the two can be useful in everyday life, especially for those who use social media regularly. . Extracting Information from Data Quiz . . Q1 Issues caused by absence of unique ID | . In this scenario, a researcher is investigating the correlation between GPA and absences of students using a database that only contains the names of the students. The problem is asking why it is problematic to not have a unique ID for each student. The correct answer is that without a unique ID, it’s possible to confuse two students with the same name. . Q2 Difficulties in analyzing data from multiple counties | . Researchers want to analyze pollution in 3000 counties in the United States and are asking about potential issues that may arise. The only viable option is that different counties organize data in various ways, making it difficult to combine all of the data into one location for analysis. . Q3 Challenges associated with user-entered city data | . This question is asking for potential problems with a program where users input a city name and information is generated about it. The most apparent issues are that users may misspell or abbreviate the name of the city, causing errors in the program. . Q4 Identifying the artist with the highest concert attendance | . The program’s objective is to find the artist with the most significant number of attendees at several concerts in a month and asks what other data points should be included. The length of the show, start time, and food and drink sales are irrelevant to the number of tickets sold. The average ticket price would be helpful in estimating the number of people who attended the concerts. . Q5 Information obtained using dashboard metadata | . Data from a car driver’s view is stored every second, capturing the car’s location and time. The problem is asking for the data point that can be determined without using metadata. The correct answer is the number of bikes that passed by the car, as it is the only concrete data option provided. . Q6 Information from student work habits survey | . This question asks what questions can be answered based on responses from a survey given by a teacher to their students. The survey asks about the time it takes to complete homework, study time for tests, and enjoyment of subjects. Based on the survey questions, the teacher would be able to determine the subjects that the students like and whether they spend more time studying or doing homework. . Application of these questions: . These questions were effective in helping us understand the various methods for extracting data and solving problems associated with it. It also tested our understanding of metadata, which will be useful in the future. As a programmer, these questions will help me look for potential problems in a dataset, as well as understand the desired outcome thoroughly. . Using Programs With Data Quiz . . Q1 Bookstore Spreadsheet | . In the Bookstore Spreadsheet question, an employee wants to find out the number of mystery books that cost less than $10 and have at least one copy in stock. The expression that would give the desired output is “(genre = “mystery”) AND ((1 ≤ num) AND (cost &lt; 10.00))”. This is because all of the given data needs to be considered, and using OR statements would not give the desired result. . Q2 Clothing store sales information | . The Clothing Store Sales Information question involves a store owner who tracks dates, payment methods, number of items, and dollars paid for every transaction. The question asks which statement is true during a 7-day period. The owner can easily track the number of items purchased over the 7-day period by adding up the number of items purchased each day. Although it does not seem directly related to programming, it is a straightforward problem to solve. . Q3 Data files to contact customers who use batteries | . The Data Files to Contact Customers Who Use Batteries question involves a company that wants to use their data files to determine which customers would be the best fit to target in an email campaign for their rechargeable battery pack. The best approach would be to compare customer IDs to item purchase IDs to identify potential customers who may be interested in the product. . Q4 Museum photograph spreadsheet | . The Museum Photograph Spreadsheet question involves a spreadsheet of information about photographs in a museum’s collection. The problem is to find which photographer took the oldest picture in the collection. The solution is to filter by photographer and sort by year or vice versa to get the years of each photo in order of the photographer who took them. . Q5 Radio Show Spreadsheet | . The Radio Show Spreadsheet question involves a spreadsheet with information about the schedule for a college radio station, including show name, genre, day, start time, and end time. The problem is to count the number of shows that are both a talk show and on a Saturday or Sunday. The best expression to output a true statement would be “(genre = “talk”) AND ((day = “Saturday”) OR (day = “Sunday”))”. This is because both conditions must be met for a show to be included. . Use of Databases to display animal information | . The Use of Databases to Display Animal Information question involves a preserve that wants to develop an interactive exhibit with information about each animal based on the guest’s selection. They have two databases of information available for the exhibit. The first database contains information about the animal’s name, classification, skin type, and thermoregulation, while the second database contains information about the animal’s name, lifestyle, average life span, and top speed. Both of these databases are necessary for the exhibit as they contain the specific data required to develop the interactive exhibit. . Application of these questions | . Overall, these questions demonstrate how to analyze data, determine specific outputs, and identify the purpose of various databases, datasets, and spreadsheets. They are helpful in developing problem-solving and data analysis skills necessary for programming projects in the future. .",
            "url": "https://taiyoi.github.io/Compsci22/2023/03/10/2.2-2.3-College-Board.html",
            "relUrl": "/2023/03/10/2.2-2.3-College-Board.html",
            "date": " • Mar 10, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Pandas and DataFrames Notes . - . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . Pandas is a popular Python library that enables you to work with data more efficiently. One of the key features of Pandas is its ability to create dataframes, which are similar to tables in SQL and store data along with metadata. With Pandas, you can work with both data and metadata in a seamless manner, making it easier for you to manipulate and analyze large datasets. . | A great benefit of using Pandas is that it allows you to create your own custom dataframes in Python, providing you with the flexibility to tailor your data analysis needs to your specific project requirements. Additionally, Pandas provides a range of tools for cleaning and manipulating data. For instance, common issues that can lead to errors, such as missing or duplicate data, can be easily identified and addressed with the help of Pandas. . | In addition to cleaning data, Pandas also provides functionality for extracting information from dataframes. You can extract specific columns of data from a dataframe, and use the index to count the amount of datapoints in a given column. Moreover, you can use the &quot;print df&quot; function to display data related to the data in a referenced dataframe. Another way to filter data is through dataframe selection, which enables you to use logical operations like Demorgans law to select data that meets certain criteria. . | Another useful feature of Pandas is the ability to view the front or back of a dataset with the &quot;head&quot; and &quot;tail&quot; functions. The head function displays the first few rows of data, while the tail function displays the last few rows. . | Lastly, APIs can be a valuable source for writing programs with data. Pandas provides functionality to access and manipulate data from APIs, allowing you to integrate external data sources into your data analysis. In summary, Pandas is a powerful library that provides many tools and functions for working with data and metadata, making it a valuable asset for data analysis and manipulation. . | . df = pd.read_json(&#39;../_notebooks/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;,&#39;Year in School&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA Year in School 123 3.57 12 246 4.00 10 578 2.78 12 469 3.45 11 324 4.75 Junior 313 3.33 20 145 2.95 12 167 3.90 10 235 3.15 9th Grade nil 2.80 9 469 3.45 11 456 2.75 10 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;../_notebooks/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous. | . When choosing a data set, think about the following:- Does it have a good sample size? - Is there bias in the data? - Does the data set need to be cleaned? - What is the purpose of the data set? - ... . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . import pandas as pd # Create a data table using pandas of top track times data = { &#39;Name&#39;: [&#39;Liav&#39;, &#39;Safin&#39;, &#39;Adi&#39;, &#39;Arnav&#39;, &#39;Taiyo&#39;], &#39;Age&#39;: [17, 17, 17, 18, 16], &#39;Weight&#39;: [130, 130, 130, 130, 120], &#39;Height&#39;: [180, 165, 175, 160, 190], &#39;Event&#39;: [100, 200, 100, 3200, 1600], &#39;PR&#39;: [11.2, 23.4, 10.5, 618, 270] } df = pd.DataFrame(data) # Display the dataset print(df) print(&#39;Etracker User Data:&#39;) # Calculate some basic statistics print(&#39;Age:&#39;) age_stats = {&#39;Max&#39;: df[&#39;Age&#39;].max(), &#39;Min&#39;: df[&#39;Age&#39;].min(), &#39;Mean&#39;: df[&#39;Age&#39;].mean(), &#39;Median&#39;: df[&#39;Age&#39;].median(), &#39;Mode&#39;: df[&#39;Age&#39;].mode()[0]} for stat, value in age_stats.items(): print(f&#39;User {stat} age: {value}&#39;) print(&#39;Weight:&#39;) weight_stats = {&#39;Max&#39;: df[&#39;Weight&#39;].max(), &#39;Min&#39;: df[&#39;Weight&#39;].min(), &#39;Mean&#39;: df[&#39;Weight&#39;].mean(), &#39;Median&#39;: df[&#39;Weight&#39;].median(), &#39;Mode&#39;: df[&#39;Weight&#39;].mode()[0]} for stat, value in weight_stats.items(): print(f&#39;User {stat} Weight: {value}&#39;) print(&#39;Height:&#39;) height_stats = {&#39;Max&#39;: df[&#39;Height&#39;].max(), &#39;Min&#39;: df[&#39;Height&#39;].min(), &#39;Mean&#39;: df[&#39;Height&#39;].mean(), &#39;Median&#39;: df[&#39;Height&#39;].median(), &#39;Mode&#39;: df[&#39;Height&#39;].mode()[0]} for stat, value in height_stats.items(): print(f&#39;User {stat} Height: {value}&#39;) print(&#39;Event:&#39;) event_stats = {&#39;Max&#39;: df[&#39;Event&#39;].max(), &#39;Min&#39;: df[&#39;Event&#39;].min(), } for stat, value in event_stats.items(): print(f&#39;User {stat} Event: {value}&#39;) . Name Age Weight Height Event PR 0 Liav 17 130 180 100 11.2 1 Safin 17 130 165 200 23.4 2 Adi 17 130 175 100 10.5 3 Arnav 18 130 160 3200 618.0 4 Taiyo 16 120 190 1600 270.0 Etracker User Data: Age: User Max age: 18 User Min age: 16 User Mean age: 17.0 User Median age: 17.0 User Mode age: 17 Weight: User Max Weight: 130 User Min Weight: 120 User Mean Weight: 128.0 User Median Weight: 130.0 User Mode Weight: 130 Height: User Max Height: 190 User Min Height: 160 User Mean Height: 174.0 User Median Height: 175.0 User Mode Height: 160 Event: User Max Event: 3200 User Min Event: 100 . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. Here are some suggestions:- Titanic Dataset: This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. . Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset:- Kaggle: The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. . UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning . From Tutorials Point%20is,a%20consistence%20interface%20in%20Python). Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&gt; Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. Decision Trees, prediction by a piecewise constant approximation. - Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7588235294117647 LogisticRegression Accuracy: 0.788235294117647 . /Users/taiyoi/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( .",
            "url": "https://taiyoi.github.io/Compsci22/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "MCQ CORRECTIONS",
            "content": "MCQ Corrections . . . . . . . . . .",
            "url": "https://taiyoi.github.io/Compsci22/2023/03/07/MCQ-corrections.html",
            "relUrl": "/2023/03/07/MCQ-corrections.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Installation Checks",
            "content": "python --version python2 --version . Python 3.9.12 Python 2.7.18 . conda list . # packages in environment at /Users/taiyoi/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 python3912jvsc74a57bd0a7fbbb54f4c181edc972ed0306a01439bd91c43236a2d6fefc317f72e31b9e0c /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd0a7fbbb54f4c181edc972ed0306a01439bd91c43236a2d6fefc317f72e31b9e0c bash /Users/taiyoi/Library/Jupyter/kernels/bash javascript /Users/taiyoi/Library/Jupyter/kernels/javascript python3 /Users/taiyoi/opt/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 python3912jvsc74a57bd0a7fbbb54f4c181edc972ed0306a01439bd91c43236a2d6fefc317f72e31b9e0c /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd0a7fbbb54f4c181edc972ed0306a01439bd91c43236a2d6fefc317f72e31b9e0c python3 /Users/taiyoi/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://taiyoi.github.io/Compsci22/techtalk/bash_checks",
            "relUrl": "/techtalk/bash_checks",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Algorithms and Logic",
            "content": "Vocabulary . Truth Table A truth table is a breakdown of a logic function by listing all possible values the function can attain. Such a table typically contains several rows and columns, with the top row representing the logical variables and combinations, in increasing complexity leading up to the final function. . | Linear Sequence of code The order of executions is strictly from top to bottom. This is good for learning, but is typically a poor method for an Algorithm! This was my 1st exploration above. . | Procedure (Function) A Procedure is a set of code instructions that has been abstracted into logical parts. Each code abstraction is called &quot;Procedural Abstraction&quot;. . | AND . | OR | XOR | NOT | . def xor(x,y): return (x or y) and not (x and y) # The boolean function def F(A, B, C, D): P = xor(A, B) Q = xor(C, D) R = xor(P, Q) return R # Translates between &#39;T&#39;/&#39;F&#39; and True/False: def f(a,b,c,d): t = &#39;T&#39; (A,B,C,D) = (a==t, b==t, c==t, d==t) R = F(A, B, C, D) return &quot;FT&quot;[R] print(&quot;Truth Table&quot;) print() print(&quot;A B C D | f(A,B,C,D)&quot;) print(&quot;========|===========&quot;) r = &quot;TF&quot; for a in r: for b in r: for c in r: for d in r: print(a, b, c, d, &quot;| &quot;, f(a, b, c, d)) . Truth Table A B C D | f(A,B,C,D) ========|=========== T T T T | F T T T F | T T T F T | T T T F F | F T F T T | T T F T F | F T F F T | F T F F F | T F T T T | T F T T F | F F T F T | F F T F F | T F F T T | F F F T F | T F F F T | T F F F F | F .",
            "url": "https://taiyoi.github.io/Compsci22/2023/03/06/ALGORITHMS.html",
            "relUrl": "/2023/03/06/ALGORITHMS.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "CPT",
            "content": "CPT OUTLINE . The fullstack comments section is a web application designed to allow users to leave comments on a webpage. The program’s overall purpose is to provide an interactive platform for website visitors to share their thoughts and opinions. . The functionality demonstrated in the video includes adding a comment to the webpage, viewing previously posted comments, and deleting comments. The input for the program demonstrated in the video includes text input by the user when creating a new comment, while the output includes the display of comments on the webpage. . One of the ways the program manages complexity is through the use of lists. In one program code segment, data is stored in a list by appending new comments to the end of the list. The second program code segment shows how the existing data in the list is used, such as accessing multiple elements in the list to display previously posted comments. . The name of the list used in the program is ‘comments’. The data contained in the list represent individual comments posted by users on the webpage. The selected list manages complexity in the program by providing a way to store and access a potentially large number of comments without the need for multiple variables. . The student-developed procedure in one of the program code segments is called ‘insert_comment’. This procedure takes in parameters such as the comment text, the commenter’s name, and the comment’s date and time. The procedure then appends the new comment to the ‘comments’ list, effectively adding it to the webpage. The algorithm implemented in the ‘insert_comment’ procedure involves sequencing, selection, and iteration. The procedure first checks that the comment text is not empty, then checks that the commenter’s name is not empty, and finally adds the comment to the ‘comments’ list. . The ‘insert_comment’ procedure contributes to the overall functionality of the program by allowing users to add new comments to the webpage. When called, the procedure checks that the comment and name fields are not empty and adds the new comment to the ‘comments’ list. The algorithm implemented in the ‘insert_comment’ procedure works by first checking if the comment and name fields are not empty. If they are not empty, the procedure creates a new comment object with the input data and appends it to the ‘comments’ list. . In written response 3d, two calls to the ‘insert_comment’ procedure are described. In the first call, the comment text field is left blank while a name and date/time are provided. The condition tested by this call is whether the comment text field is empty or not. The result of this call is that the comment is not added to the ‘comments’ list. In the second call, both the comment text and name fields are provided while the date/time field is left blank. The condition tested by this call is whether the date/time field is empty or not. The result of this call is that the comment is added to the ‘comments’ list. Overall, the fullstack comments section meets the College Board’s requirements for APCSP by providing a functional web application that uses programming concepts such as lists and procedures to manage complexity and achieve its purpose. . CPT OUTLINE .",
            "url": "https://taiyoi.github.io/Compsci22/2023/02/28/cpt.html",
            "relUrl": "/2023/02/28/cpt.html",
            "date": " • Feb 28, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Computer Bias",
            "content": "Intentional or Purposeful bias (Crossover Group Up, 10 minutes) . Google “What age groups use Facebook” vs “… TikTok”? What does the data say? Is there purposeful exclusion in these platforms? Is it harmful? Should it be corrected? Is it good business? . According to the Pew Research Center, the majority of Facebook users are between the ages of 18 and 29, while the majority of TikTok users are between the ages of 16 and 24. This suggests that Facebook is geared more towards older users, while TikTok is geared more towards younger users. Facebook was one of the original social media companies so it attracts the older generation. . Why do virtual assistants have female voices? Amazon, Alexa Google, Apple Siri. Was this purposeful? Is it harmful? Should it be corrected? Is it good business? . I think that virtual assistants have female voices because female voices have a softer connotation so it makes customers/users more comfortable with the virtual assistant they are talking to. It is not clear why virtual assistants often have female voices, but it could be because there is research to suggest that people find female voices more calming, trustworthy, and personable. Additionally, it may be an unconscious bias based on traditional gender roles. I think it should only be corrected if there is really a lot of controversy about this topic. However, from what I hear on the internet right now, it is not really a problem to be considered because technology such as Chat GPT is quickly replacing these virtual assistants. . Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple,Netflix, Google) . Google . Google Ads | Youtube recommendations | . Facebook . Facebook Ads | . Amazon . Amazon product recommendations | . Video Questions . Does the owner of the computer think this was intentional? . Yes, the owner of the computer thinks that the computer is racist as it cannot track him, an african american. . If yes or no, justify you conclusion. . He says that the computer cannot track negroes. . How do you think this happened? . There was not enough testing. . Is this harmful? Was it intended to be harmful or exclude? . Yes, this is harmful because people of darker skins are excluded . Should it be corrected? . yes, because racism is bad . What would you or should you do to produce a better outcome? . Test more different scenarios. . Obtaining Data via Crowdsourcing (Crossover Group Up, ~10 minutes) . We have all experienced Crowdsourcing by using external data through API’s, namely RapidAPI. This data has influenced how we code and shown possibilities in obtaining and analyzing data. Discuss APIs you have used. . I have used Car APIS for my performance project. I also have used weather API to be able to get weather information. . We have all participated in code Crowdsourcing by using GitHub. Many of you have forked from the Teacher repository, or exchanged code with fellow students. Not only can we analyze GitHub code, but we can obtain profiles and history about the persons coding history. What is the biggest discovery you have found in GitHub? . I think my biggest discovery in Git Hub is being able to connect with other users. . Kaggle datasets for code and science exploration. The avenue of data points us youtube or netflix channels. Analyzing crowd data helps us make decisions. Exam top 10 to 20. Did you see anything interesting? . Yes, I did see some interesting data points. For example, the top 10 to 20 YouTube channels all had an average of over one million views, with the top channel having over seven million views. This could be indicative of the popularity of YouTube as a platform for content creators. Additionally, the top 10 to 20 Netflix channels all had an average of over one million subscribers, with the top channel having over four million subscribers. This could be indicative of the popularity of Netflix as a streaming service. .",
            "url": "https://taiyoi.github.io/Compsci22/2023/02/01/class-notes.html",
            "relUrl": "/2023/02/01/class-notes.html",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Individual MCQ Test",
            "content": "College Board Corrections . For this college board test, I did not perform to my expectations AT ALL. I was truly disappointed at my results of 21/50. However, I did learn what types of questions that I am not strong with: the logic questions. Here are also some other factors that might have come into play when I was taking this college board test. . Firstly, it could be due to a lack of understanding of the concepts. Logical reasoning and problem solving are essential skills in computer science, and it may be helpful to review the material and practice more problems to build my confidence in these areas. Consider seeking help from a teacher or tutor, or reviewing online resources to deepen my understanding. . Another reason could be test anxiety. Tests can be stressful, and it is not uncommon to feel nervous or overwhelmed during an exam. However, it is important to remain calm and focused, and to take deep breaths and relax when necessary. . It is also possible that I did not fully understand the format of the test or the instructions for each question. Make sure that I are familiar with the format of the exam and the types of questions that will be asked. Read the instructions carefully and take my time to understand what is being asked before answering. . Finally, it is possible that I simply made mistakes or did not have enough time to complete all the questions. This is a common experience for many students, and it is important to remember that mistakes are part of the learning process. Use my score as an opportunity to identify areas for improvement and to focus on my efforts on those areas in the future. . In conclusion, there are several reasons why I may have gotten the more logical type of answers wrong on the AP Computer Science Principles exam. However, it is important to keep a positive attitude and to use my score as an opportunity to improve and grow. With hard work and dedication, I can achieve my goals and succeed in my future endeavors. . .",
            "url": "https://taiyoi.github.io/Compsci22/2023/01/27/individualmcqtest-review.html",
            "relUrl": "/2023/01/27/individualmcqtest-review.html",
            "date": " • Jan 27, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Project Blog",
            "content": "Description of Hacks . Individual: Project Blog links added to review ticket. | Each individual performs starts “pre-view” outline/write-up of materials required for College Board. | Describe portion of Project you will use for Create Performance task | Describe code plan as it is required for CB, | Consider what will be demonstrated in video, aka video plan . Overview/ Outline of my function . | . The project that my team, TeamOrbOrb is working on is called: CarHub. This platform will allow users to easily find the certain specifications such as fuel economy, used price, new price, engine specs, color options and model/brand. My part of the project involves the Inventory of the cars, filtering system that will allow the user to filter cars based on certain specifications. These specifications will include price, brand, and car type (performance, sedan, SUV, etc…). Currently the inventory solely consists of cars auto generated from chatGPT. However, in the future cars and their specs will be pulled from APIS such as CAR API and Edmund’s car API. This will meet the API requirement. Along with the Inventory feature, I will be adding a simple car quiz that evaluates the user’s most optimal car based on their choices through the quiz. The final result will communicate with my teammates profile and login feature which will allow the user to save the result of the quiz to their profile. . Describing code plan . Discover and obtain the API: The first step is to find the API that you want to use and obtain the necessary information to access it, such as the API endpoint (URL) and any authentication keys or tokens that may be required. . | Send a request: Next, you send a request to the API endpoint using a programming language or tool of your choice, such as Python or Postman. The request should specify the type of information you want to retrieve (e.g. a specific resource, data set, or action) and any additional parameters or filters that you want to apply. . | Receive a response: The API will respond to your request by sending back a response in the form of data, typically in a structured format such as JSON or XML. The response will contain the information that you requested, along with metadata about the request and response. . | Process the response: Once you have received the response, you can then process the information and use it as needed in your own application. This may involve parsing the data, transforming it into a different format, or storing it for later use. . | Repeat as needed: Depending on the API, you may be able to send repeated requests to retrieve additional information or update existing information. You should check the API documentation to understand the capabilities and limitations of the API and to ensure that you are using it in an appropriate and responsible manner. . | Consider what will be demonstrated in video, aka video plan . In the Video plan, I will be showcasing my framework of the initial plans of what I intended to make (model of the website) and the outcome. I will be showing the functionality of the quiz and sending the final results to the profile, then I will be showcasing the filtering system in the inventory along with the API communicating the car’s information. . Examples of what the website looks like currently . . . . . . . . .",
            "url": "https://taiyoi.github.io/Compsci22/2023/01/27/Project-blog.html",
            "relUrl": "/2023/01/27/Project-blog.html",
            "date": " • Jan 27, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "Project Approval",
            "content": "Beneficial and Harmful effects of my Project: . Our Purpose: Many people, especially at our age, are looking for a car that will suit their needs (ie. price range, number of seats, &amp; reliability). For many, it can be tough to research a car that fits their given criteria. . With CarHub, users can easily look through variety of cars and find the car that fits their requirements . Beneficial effects of my project . One beneficial effect of my project is that people of all ages and search for and compare cars without having to go to each individual brand’s website and reduce clutter to find the most optimal car for them. . | Another beneficial effect of my project is that there are many types of specifications for each car so the user knows what each car’s capabilities. . | Our website can provide accurate pricing information so users (especially teens) can know if they are getting their money’s worth for their car or if they are overspending. . | . Harmful effects of my team’s project: . Although our API claims to have the most accurate data on cars, sometimes the data can be outdated which means prices, certain models and other factors may not be fully up to date. For example, some underground car brands such as lotus may not be included in the search even though they make great cars. Another example of why or Project may be harmful is the quotes for used cars of new cars may be either over or under MSRP and could hurt the user if they are in the process of purchasing a vehicle. This is also harmful to dealerships that like to mark up the price of cars because they may be unable to make sales due to our pricing quotes (which if inaccurate could hurt the user). . What are pros/cons on internet blockers at router and lack of admin password on lab machines at school? What concerns do you have personally about the digital divide? For yourself or for others. . The use of internet blockers at routers has both advantages and disadvantages. On one hand, it allows for parental control, improves productivity by preventing access to non-work related websites, and enhances security by blocking malicious websites. On the other hand, it can restrict access to information and limit freedom of speech and expression, cause inconvenience by blocking necessary websites, and require technical expertise to set up and maintain. The lack of admin passwords on lab machines at school also has its pros and cons. It enhances security by preventing students from installing unauthorized software and making unauthorized changes, and simplifies management for teachers. However, it also limits students’ ability to install necessary software, save their work, and access their files, and can lead to frustration and a lack of control over their work environment. The digital divide is a personal concern as it exacerbates existing social and economic inequalities by limiting access to information, educational resources, and essential services for those who are already disadvantaged. This can have a negative impact on individuals, communities, and society as a whole. .",
            "url": "https://taiyoi.github.io/Compsci22/2023/01/27/5.1-5.2hacks.html",
            "relUrl": "/2023/01/27/5.1-5.2hacks.html",
            "date": " • Jan 27, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Title",
            "content": ". title: OOP Hacks description: OOP Hacks toc: true . comments: true . OOP Hacks . # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json import datetime from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, dob, password, classOf): self._name = name # variables with self prefix become part of the object, self._uid = uid self._dob = dob self.set_password(password) self._classOf = classOf # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid @property def dob(self): return self._dob @dob.setter def dob(self, dob): self._dob = dob @property def classOf(self): self._classOf = classOf @classOf.setter def classOf(self, dob): self._classOf = classOf # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def age(self): self._age = age @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot; dob: &quot;{self.dob}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password}, dob={self._dob})&#39; def toJSON(self): excluded_fields = [&quot;_password&quot;, &quot;_dob&quot;] return json.dumps( { k[1:]: v for k, v in self.__dict__.items() if k not in excluded_fields } | {&quot;age&quot;: calculate_age(self._dob)}, cls=DateTimeEncoder, ) # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, dob = str(date(1847, 2, 11)), password=&#39;123toby&#39;, classOf=1915) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, dob = str(date(1856, 7, 10)), password=&#39;123nick&#39;, classOf = 1873) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, dob = str(date(1847, 3, 3)), password=&#39;123lex&#39;, classOf = 1870) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, dob = str(date(1765, 12, 8)), password=&#39;123eli&#39;, classOf = 1786) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, dob = str(date(1914, 9, 9)), password=&#39;123hedy&#39;, classOf = 1936) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$sCH...&#34; dob: &#34;1847-02-11&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$QtW...&#34; dob: &#34;1856-07-10&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$Tpa...&#34; dob: &#34;1847-03-03&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$ISs...&#34; dob: &#34;1765-12-08&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$7bI...&#34; dob: &#34;1914-09-09&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$sCH...&#34; dob: &#34;1847-02-11&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$QtW...&#34; dob: &#34;1856-07-10&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$lXW...&#34; dob: &#34;1847-03-03&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$ISs...&#34; dob: &#34;1765-12-08&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$7bI...&#34; dob: &#34;1914-09-09&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_dob&#34;: &#34;1847-02-11&#34;, &#34;_password&#34;: &#34;sha256$sCHIgT5BfMZLFsb4$017d2604e0600da1220a8b40241f6766e49be0129f8e3bbd86b11b62c4bf5e72&#34;, &#34;_classOf&#34;: 1915}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_dob&#34;: &#34;1856-07-10&#34;, &#34;_password&#34;: &#34;sha256$QtW2GkpuszbTm9MC$36bc84e832a67678780a7ac18f5d0bb33aef39b2f63dacbc6d6c566c70ab1630&#34;, &#34;_classOf&#34;: 1873}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_dob&#34;: &#34;1847-03-03&#34;, &#34;_password&#34;: &#34;sha256$lXWFoRLOZdIVKMOm$a73387d576872cfe077250646564b9974d18b17055bd4ca77437b3733f926af9&#34;, &#34;_classOf&#34;: 1870}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_dob&#34;: &#34;1765-12-08&#34;, &#34;_password&#34;: &#34;sha256$ISsRmJoZfgO9Zg7H$a48c1e5f9692c1eb7f27753604c13e8b84e404e84faf9828cbfea06b461adb00&#34;, &#34;_classOf&#34;: 1786}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_dob&#34;: &#34;1914-09-09&#34;, &#34;_password&#34;: &#34;sha256$7bI68J9yMyEOwKas$4d41a6603e479c86159798bd7b3c849cbb8da4dba32afaf198a289a0450e5589&#34;, &#34;_classOf&#34;: 1936}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_dob&#34;: &#34;1847-02-11&#34;, &#34;_password&#34;: &#34;sha256$sCHIgT5BfMZLFsb4$017d2604e0600da1220a8b40241f6766e49be0129f8e3bbd86b11b62c4bf5e72&#34;, &#34;_classOf&#34;: 1915}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_dob&#34;: &#34;1856-07-10&#34;, &#34;_password&#34;: &#34;sha256$QtW2GkpuszbTm9MC$36bc84e832a67678780a7ac18f5d0bb33aef39b2f63dacbc6d6c566c70ab1630&#34;, &#34;_classOf&#34;: 1873}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_dob&#34;: &#34;1847-03-03&#34;, &#34;_password&#34;: &#34;sha256$lXWFoRLOZdIVKMOm$a73387d576872cfe077250646564b9974d18b17055bd4ca77437b3733f926af9&#34;, &#34;_classOf&#34;: 1870}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_dob&#34;: &#34;1765-12-08&#34;, &#34;_password&#34;: &#34;sha256$ISsRmJoZfgO9Zg7H$a48c1e5f9692c1eb7f27753604c13e8b84e404e84faf9828cbfea06b461adb00&#34;, &#34;_classOf&#34;: 1786}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_dob&#34;: &#34;1914-09-09&#34;, &#34;_password&#34;: &#34;sha256$7bI68J9yMyEOwKas$4d41a6603e479c86159798bd7b3c849cbb8da4dba32afaf198a289a0450e5589&#34;, &#34;_classOf&#34;: 1936}] . from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2004, 12, 31) age = calculate_age(dob) print(age) from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11)) u2 = User(name=&#39;Taiyo Iwazak&#39;, uid=&#39;Tai&#39;, password=&#39;123Tai&#39;, dob=date(2006, 7, 13)) u3 = User(name=&#39;Luna Iwazaki&#39;, uid=&#39;Lun&#39;, password=&#39;123Lun&#39;, dob=date(2005, 2, 11)) u4 = User(name=&#39;Ethan tran&#39;, uid=&#39;Eth&#39;, password=&#39;123Tra&#39;, dob=date(2002, 9, 11)) u5 = User(name=&#39;Nikhil C&#39;, uid=&#39;Nik&#39;, password=&#39;123Nik&#39;, dob=date(2006, 9, 10)) users = [u1, u2, u3, u4, u5] for x in users: print(x.name.upper()+&quot;:&quot;) print(&quot; t Name:&quot;, x.name) print(&quot; t User ID:&quot;, x.uid) print(&quot; t Date of Birth:&quot;, x.dob) print(&quot; t Age:&quot;, x.age, &quot;years old n&quot;) print(&quot;JSON ready string: n t&quot;, x, &quot; n&quot;) print(&quot;Raw Variables of object: n t&quot;, vars(x), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n t&quot;, dir(x), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n t&quot;, repr(x), &quot; n&quot;) . 18 THOMAS EDISON: Name: Thomas Edison User ID: toby Date of Birth: 02-11-1847 Age: 175 years old JSON ready string: {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$2hRZk7HDSMWWfgDq$e28ef7e7dc622ea246bb450469fa87f674e2351f614e2c315421451c2e597944&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11)} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, password=sha256$2hRZk7HDSMWWfgDq$e28ef7e7dc622ea246bb450469fa87f674e2351f614e2c315421451c2e597944,dob=1847-02-11) TAIYO IWAZAK: Name: Taiyo Iwazak User ID: Tai Date of Birth: 07-13-2006 Age: 16 years old JSON ready string: {&#34;name&#34;: &#34;Taiyo Iwazak&#34;, &#34;uid&#34;: &#34;Tai&#34;, &#34;dob&#34;: &#34;07-13-2006&#34;, &#34;age&#34;: 16} Raw Variables of object: {&#39;_name&#39;: &#39;Taiyo Iwazak&#39;, &#39;_uid&#39;: &#39;Tai&#39;, &#39;_password&#39;: &#39;sha256$vzRX5SqVju6GgT7q$65bb3bbe8907ea6bc8de2e03de45406ead8c3ae770628185f5c1f1e9a6e94e35&#39;, &#39;_dob&#39;: datetime.date(2006, 7, 13)} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Taiyo Iwazak, uid=Tai, password=sha256$vzRX5SqVju6GgT7q$65bb3bbe8907ea6bc8de2e03de45406ead8c3ae770628185f5c1f1e9a6e94e35,dob=2006-07-13) LUNA IWAZAKI: Name: Luna Iwazaki User ID: Lun Date of Birth: 02-11-2005 Age: 17 years old JSON ready string: {&#34;name&#34;: &#34;Luna Iwazaki&#34;, &#34;uid&#34;: &#34;Lun&#34;, &#34;dob&#34;: &#34;02-11-2005&#34;, &#34;age&#34;: 17} Raw Variables of object: {&#39;_name&#39;: &#39;Luna Iwazaki&#39;, &#39;_uid&#39;: &#39;Lun&#39;, &#39;_password&#39;: &#39;sha256$PsMdzvbZCcgCGLCs$0180d68462671f852d61b67a96802703247a47f1a5f8eff66bbaa754d6137e81&#39;, &#39;_dob&#39;: datetime.date(2005, 2, 11)} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Luna Iwazaki, uid=Lun, password=sha256$PsMdzvbZCcgCGLCs$0180d68462671f852d61b67a96802703247a47f1a5f8eff66bbaa754d6137e81,dob=2005-02-11) ETHAN TRAN: Name: Ethan tran User ID: Eth Date of Birth: 09-11-2002 Age: 20 years old JSON ready string: {&#34;name&#34;: &#34;Ethan tran&#34;, &#34;uid&#34;: &#34;Eth&#34;, &#34;dob&#34;: &#34;09-11-2002&#34;, &#34;age&#34;: 20} Raw Variables of object: {&#39;_name&#39;: &#39;Ethan tran&#39;, &#39;_uid&#39;: &#39;Eth&#39;, &#39;_password&#39;: &#39;sha256$bB5ZhS2oEf6nt3QI$2d064eb08acf7a2728615e8e22319114c67be935277bff4b452bad304f3673f2&#39;, &#39;_dob&#39;: datetime.date(2002, 9, 11)} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Ethan tran, uid=Eth, password=sha256$bB5ZhS2oEf6nt3QI$2d064eb08acf7a2728615e8e22319114c67be935277bff4b452bad304f3673f2,dob=2002-09-11) NIKHIL C: Name: Nikhil C User ID: Nik Date of Birth: 09-10-2006 Age: 16 years old JSON ready string: {&#34;name&#34;: &#34;Nikhil C&#34;, &#34;uid&#34;: &#34;Nik&#34;, &#34;dob&#34;: &#34;09-10-2006&#34;, &#34;age&#34;: 16} Raw Variables of object: {&#39;_name&#39;: &#39;Nikhil C&#39;, &#39;_uid&#39;: &#39;Nik&#39;, &#39;_password&#39;: &#39;sha256$LQFJTQTmyK45Ingh$e5168359eef5de40d497c9bb9ca8a264ca3f2891af5a77045d1ff5e5227b32c2&#39;, &#39;_dob&#39;: datetime.date(2006, 9, 10)} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Nikhil C, uid=Nik, password=sha256$LQFJTQTmyK45Ingh$e5168359eef5de40d497c9bb9ca8a264ca3f2891af5a77045d1ff5e5227b32c2,dob=2006-09-10) .",
            "url": "https://taiyoi.github.io/Compsci22/2023/01/10/PBL-model.html",
            "relUrl": "/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "Title",
            "content": "",
            "url": "https://taiyoi.github.io/Compsci22/2023/01/10/PBL-model-jvsc-e08afcba-9e12-4e75-b0fc-48fcaff981999a205833-9bfe-4610-af88-b9f98ffd426f.html",
            "relUrl": "/2023/01/10/PBL-model-jvsc-e08afcba-9e12-4e75-b0fc-48fcaff981999a205833-9bfe-4610-af88-b9f98ffd426f.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "Performance Task Scoring 1",
            "content": "Objective . Students will learn performance tasks requirements through the performance task examples from last year. Using the rubric provided, students will perform cross-over like grading on the different elements. . Testing Category Student 1: 4/6 Student 2: 6/6 College Board Score student 1 College Board Score student 2 . Program Purpose and function: | - describes the overall purpose of the program. • describes what functionality of the program is demonstrated in the video. • describes the input and output of the program demonstrated in the video. | - describes the overall purpose of the program. • describes what functionality of the program is demonstrated in the video. • describes the input and output of the program demonstrated in the video. | 0 | 1 | . Data Abstraction: | - includes two program code segments: - one that shows how data has been stored in this list (or other collection type). - one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | - includes two program code segments: - one that shows how data has been stored in this list (or other collection type). - one that shows the data in this same list being used as part of fulfilling the program’s purpose. • identifies the name of the variable representing the list being used in this response. • describes what the data contained in this list is representing in the program. | 1 | 1 | . Managing Complexity: | - includes a program code segment that shows a list Complexity being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | - includes a program code segment that shows a list Complexity being used to manage complexity in the program. • explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | 0 | 1 | . Procedural Abstraction: | includes two program code segments: Abstraction - one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. - one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | includes two program code segments: Abstraction - one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. - one showing where the student-developed procedure is being called. • describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | 1 | . Algorithm Implementation: | - includes a program code segment of a student - Implementation developed algorithm that includes - sequencing - selection - iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | - includes a program code segment of a student - Implementation developed algorithm that includes - sequencing - selection - iteration • explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | 1 | . Testing: | - describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | - describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. • describes the condition(s) being tested by each call to the procedure. • identifies the result of each call. | 1 | 1 | . ## Student 1 notes - There were no differences between my scoring and College board&#39;s scoring. Both grades were 4/6. This was because the student did not describe their program&#39;s purpose. Moreover, they described the program&#39;s functionality and how it worked. This is a crucial point on the AP college board scoring because you need to know how to accurately describe the program&#39;s purpose. - The student also missed a point on the program&#39;s managing complexity meaning they were not very organized. To prevent this in the future, making a table and a framework will help make your life easier and more organized. - All in all, I think the student has some areas to improve in, but the overall project was good. ## Student 2 notes - My scoring was no different than AP College board&#39;s. This student deserved a 6/6 for his great demonstration along with instructions in the code it self. - The student went above and beyond in both the program and written areas. The student gave detailed descriptions and gave a good video example. - For my project, I will need to follow each and every grading area carefully so I do not get docked.",
            "url": "https://taiyoi.github.io/Compsci22/2023/01/09/AP-Rubric-Grading.html",
            "relUrl": "/2023/01/09/AP-Rubric-Grading.html",
            "date": " • Jan 9, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Notes",
            "content": ". title: Lesson17-18 hacks description: Lesson 17-18 hacks toc: true . comments: true . Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. (.25) (Extra credit: If your code is more efficient it will recieve a higher grade.) . i = int(input(&quot;Please input a number: &quot;)) list = [] def collatz_seq(n): list = [] while n != 1: if (n % 2): n = 3*n + 1 else: n = n/2 list.append(n) return list result = collatz_seq(i) print(&quot;Input:&quot; , i) print(result) print(&quot;Iteration count:&quot;, len(result)) . Input: 2 [1.0] Iteration count: 1 . Hack #2 1) Code 2 algorithms: (.25) . The first Algorithm should be efficient while the second should be inefficient. Then explain what distinguishes the efficient from the non-efficient one. (In your own words) . car = [] car.append({ &quot;Make&quot;: &quot;BMW&quot;, &quot;Model&quot;: &quot;M4 CSL&quot;, &quot;Year&quot;: &quot;2023&quot;, }) def loop(): for data in car: print(data) loop() . {&#39;Make&#39;: &#39;BMW&#39;, &#39;Model&#39;: &#39;M4 CSL&#39;, &#39;Year&#39;: &#39;2023&#39;} . car = &quot;Make: BMW&quot;, &quot;Model: M4 CSL&quot;, &quot;Year: 2023&quot; print(car) . (&#39;Make: BMW&#39;, &#39;Model: M4 CSL&#39;, &#39;Year: 2023&#39;) . Algorithm 1 properly displays efficiency, as it appends the list and utilizes a for loop in order to display the data of the given car in an orderly manner. Algorithm 2 is inefficient because the data is only displayed in the order that it is typed in. . Explain algorithm efficiency in your own words (.25) . Algorithm efficiency in computer science is the measure of how well a particular algorithm performs when compared to other algorithms. It is typically calculated by measuring the amount of time and space it takes to complete a task. . tasks = [&quot;Berry&quot;, &quot;Apple&quot;, &quot;Heading to school!&quot;, &quot;Strawberry&quot;, &quot;Banana&quot;] def daily_routine(tasks): for task in tasks: if task == &quot;Berry&quot;: print(&quot;Berry&quot;) elif task == &quot;Apple&quot;: print(&quot;Apple&quot;) elif task == &quot;Grape&quot;: print(&quot;Grape&quot;) elif task == &quot;Strawberry&quot;: print(&quot;Strawberry&quot;) elif task == &quot;Banana&quot;: print(&quot;Banana&quot;) daily_routine(tasks) . Berry Apple Strawberry Banana .",
            "url": "https://taiyoi.github.io/Compsci22/2022/12/16/Unit3Lesson17-18.html",
            "relUrl": "/2022/12/16/Unit3Lesson17-18.html",
            "date": " • Dec 16, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Lesson 3.18",
            "content": "Vocab . Collatz . The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . Hailstone numbers . The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples:Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No.&gt; ### Iteration The action or a process of iterating or repeating:such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . Undecidable problems . An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . Unsolvable problems . An unsolvable problem is one for which no algorithm can ever be written to find the solution. . Additional information . A problem posed by L. Collatz in 1937, also called the 3x+1 mapping, 3n+1 problem, Hasse&#39;s algorithm, Kakutani&#39;s problem, Syracuse algorithm, Syracuse problem, Thwaites conjecture, and Ulam&#39;s problem (Lagarias 1985). Thwaites (1996) has offered a £1000 reward for resolving the conjecture. Let a_0 be an integer. Then one form of Collatz problem asks if iterating . always returns to 1 for positive a_0. (If negative numbers are included, there are four known cycles (excluding the trivial 0 cycle): (4, 2, 1), (-2, -1), (-5, -14, -7, -20, -10), and (-17, -50, -25, -74, -37, -110, -55, -164, -82, -41, -122, -61, -182, -91, -272, -136, -68, -34).) . The members of the sequence produced by the Collatz are sometimes known as hailstone numbers. Conway proved that the original Collatz problem has no nontrivial cycles of length &lt;400. Lagarias (1985) showed that there are no nontrivial cycles with length &lt;275000. Conway (1972) also proved that Collatz-type problems can be formally undecidable. Kurtz and Simon (2007) proved that a natural generalization of the Collatz problem is undecidable; unfortunately, this proof cannot be applied to the original Collatz problem. . The Collatz algorithm has been tested and found to always reach 1 for all numbers &lt;=19·2^(58) approx 5.48×10^(18) (Oliveira e Silva 2008), improving the earlier results of 10^(15) (Vardi 1991, p. 129) and 5.6×10^(13) (Leavens and Vermeulen 1992). Because of the difficulty in solving this problem, Erdős commented that &quot;mathematics is not yet ready for such problems&quot; (Lagarias 1985). . The numbers of steps required for the algorithm to reach 1 for a_0=1, 2, ... are 0, 1, 7, 2, 5, 8, 16, 3, 19, 6, 14, 9, 9, 17, 17, 4, 12, 20, 20, 7, ... (OEIS A006577; illustrated above). Of these, the numbers of tripling steps are 0, 0, 2, 0, 1, 2, 5, 0, 6, ... (OEIS A006667), and the number of halving steps are 0, 1, 5, 2, 4, 6, 11, 3, 13, ... (OEIS A006666). The smallest starting values of a_0 that yields a Collatz sequence containing n=1, 2, ... are 1, 2, 3, 3, 3, 6, 7, 3, 9, 3, 7, 12, 7, 9, 15, 3, 7, 18, 19, ... (OEIS A070167). . The Collatz problem can be implemented as an 8-register machine (Wolfram 2002, p. 100), quasi-cellular automaton (Cloney et al. 1987, Bruschi 2005), or 6-color one-dimensional quasi-cellular automaton with local rules but which wraps first and last digits around (Zeleny). In general, the difficulty in constructing true local-rule cellular automata arises from the necessity of a carry operation when multiplying by 3 which, in the worst case, can extend the entire length of the base-b representation of digits (and thus require propagating information at faster than the CA&#39;s speed of light). . Algorithmic efficiency is an aspect of algorithmic programming that measures the number of steps needed to solve a problem. For instance, If I wanted to create a sorting algorithm that sorts numbers the numbers [2,4,5,1,3]from least to greatest, rather than having an algorithm that compares itself to the next number and swaps accordingly it would be more efficient if you had a program that scans through all the numbers and checks whether a number is smaller or bigger than the rest than and sorts accordingly. Both of the algorithms had the same objective, but one runs more efficiently than the other. . . Hacks . Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. The more efficient the code, the higher your grade will be. (Algorithm Efficency) (.25) . def collatz(i): while i &gt; 1: print(i, end=&#39; &#39;) if (i % 2): # i is odd i = 3*i + 1 else: # i is even i = i//2 print(1, end=&#39;&#39;) i = int(input(&#39;Enter i: &#39;)) print(&#39;Sequence: &#39;, end=&#39;&#39;) collatz(i) . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(i) else: i = (i / 2) list_.append(i) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;&#39;) print(&#39;Number of iterations:&#39;, len(l) - 1) .",
            "url": "https://taiyoi.github.io/Compsci22/2022/12/14/Lesson18.html",
            "relUrl": "/2022/12/14/Lesson18.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Lesson 3.17",
            "content": "Experiment definition: procedure undertaken to make a discovery, test a hypothesis, or demonstrate a known fact | . So, why use a simulation? . Advantages: Can be safer | More cost-effective | More efficient | More data in less time | . | Disadvantages: Not as accurate as experiments | outside factors not included (ex: in rolling dice simulation gravity and air resistance) | . | When do you not use a simulation? when a situation already has set results/data (won&#39;t change) | examples: a score in a game, most purchased food, average yearly wage | . | . Hack #1 . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). . | a good simulation would be the Toca Boca Chemistry game. . | . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . Welcome to the Simulations Quiz! True or False: Simulations will always have the same result. A: True, B: False You said: B Correct! True or False: A simulation has results that are more accurate than an experiment A: True, B: False You said: B Correct! True or False: A simulation can model real world events that are not practical for experiments A: True, B: False You said: A Correct! Which one of these is FALSE regarding simulations A: Reduces Costs, B: Is safer than real life experiments, C: More Efficient, D: More accurate than real life experiments You said: D Correct! Which of the following scenarios would be the LEAST beneficial to have as a simulation A: A retail company wants to identify the item which sold the most on their website, B: A restaurant wants to determine if the use of robots will increase efficiency, C: An insurance company wants to study the impact of rain on car accidents, D: A sports car company wants to study design changes to their new bike design You said: A Correct! Which of the following is better to do as a simulation than as a calculation A: Keeping score at a basketball game, B: Keeping track of how many games a person has won, C: Determining the average grade for a group of tests, D: Studying the impact of carbon emissions on the environment You said: D Correct! You scored: 6 /6 . Hack #3 (0.2) . Describe the rolling dice simulation (answer guiding questions) | . The rolling dice simulation generates a random number between 1 and 6. It is a simulation because it is replicating a real life situation. . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 10.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 10) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-10] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) print(&quot;you rolled:&quot;, roll_results) . you rolled: [4, 3, 9, 7, 2, 6, 6] . Here in the dice roll, I changed the amount of sides the dice had. So instead of a six-sided die, I changed the values to make it a 10-sided die. . Use these guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Hack #1 (0.3) . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 (0.1) . Simulations Quiz (either screenshot or paste quiz in your notebook) | . Hack #3 (0.2) . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 (0.3) . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . Extra Credit (0.1) . For the extra 0.1: try coding a simple simulation and describe it (guiding question) | . 2048 . 104+24 1420 New Game . Keep Going Try Again? 26688244622 .",
            "url": "https://taiyoi.github.io/Compsci22/2022/12/13/Lesson16Notes&Hacks.html",
            "relUrl": "/2022/12/13/Lesson16Notes&Hacks.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Vocab",
            "content": "Unit 2&#8230; Binary/Data Terms . Bits: A given byte contains either bits or a code. A designation of &#39;bits&#39; means that each individual bit has its own meaning, independent of the meaning of other bits in the byte . bits = 8 # 8 bits in a byte . Bytes: a group of binary digits or bits (usually eight) operated on as a unit. . bytes = 1024 # 1 kilobyte . Hexadecimal / Nibbles: In communications, a nibble is sometimes referred to as a quadbit. As with any nibble, the quadbit is 4 bits and has 16 possible combinations. . hex_val = 0xFF # 255 in hexadecimal nibble_val = 0b1111 # 15 in binary . Binary Numbers: According to digital electronics and mathematics, a binary number is defined as a number that is expressed in the binary system or base 2 numeral system. It describes numeric values by two separate symbols; 1 (one) and 0 (zero) . Unsigned Integer: Unsigned Integers (often called &quot;uints&quot;) are just like integers (whole numbers) but have the property that they don&#39;t have a + or - sign associated with them. Thus they are always non-negative (zero or positive) . unsigned_int = 45 # 45 in binary . Signed Integer: positive, negative, whole number, or zero . signed_int = -45 # -45 in binary . Floating Point: A floating point number, is a positive or negative whole number with a decimal point. . float_val = 3.14 # 3.14 in binary . Binary Data Abstractions: Boolean: a binary variable, having two possible values called “true” and “false.” . boolean_val = True # True in binary . ASCII: ASCII (American Standard Code for Information Interchange) is the most common character encoding format for text data in computers and on the internet. . ascii_val = ord(&#39;A&#39;) # 65 in binary . Unicode: an international encoding standard for use with different languages and scripts, by which each letter, digit, or symbol is assigned a unique numeric value that applies across different platforms and programs. . unicode_val = ord(&#39;👨‍👩‍👧‍👦&#39;) # 128103 in binary . RGB: red, green, and blue RGB (red, green, and blue) refers to a system for representing the colors to be used on a computer display. . rgb_val = (255, 0, 0) # 255 red in binary . Data Compression: Data compression is a reduction in the number of bits needed to represent data. . Lossy: involving or causing some loss of data. Lossy compression is a way of getting even smaller squeezed files than lossless. . lossy_val = 0.5 # 50% of data lost . Lossless (not discussed yet) . lossless_val = 0 # 0% of data lost . Unit 3&#8230; Algorithm/Programming Terms . Variables: A variable is a symbolic name for a value that can be changed, depending on the conditions of a program.#Variables #Declaring a variable in Python name = &quot;John&quot; . | Data Types: Data types are the classification or categorization of data items. Examples of data types include integers, floating point numbers, characters, strings, and Boolean values. | #Data Types #Creating an integer integer_example = 5 #Creating a float float_example = 3.14 #Creating a Boolean boolean_example = True #Creating a string string_example = &quot;Hello World&quot; . Assignment Operators:Assignment operators are used to assign a value to a variable. Examples include the =, +=, -=, *=, and /= operators.#Assignment Operators #Assigning the value of a variable x = 5 #Adding to a variable x += 5 #Subtracting from a variable x -= 5 . | Lists: A list is an ordered collection of data items. Items in a list are separated by commas and are enclosed in square brackets.#Managing Complexity with Variables: Lists #Creating a list list_example = [1, 2, 3] #Adding an element to a list list_example.append(4) . | 2D Lists: A two-dimensional list is a list of lists. Each list inside the 2D list is a row, and each item in the row is a column.#Creating a 2D list list_example_2d = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] . | Dictionaries: A dictionary is a data type that maps keys to values. Items in a dictionary are separated by commas and are enclosed in curly braces.#Creating a dictionary dict_example = {&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 29} . | Classes: A class is a code template that is used to create objects. It is a blueprint of an object and is used to define the properties and methods of an object.#Creating a class class Car: def __init__(self, make, model): self.make = make self.model = model . | Algorithms: An algorithm is a set of instructions or steps used to solve a problem.#Creating a sequence sequence_example = [1, 2, 3, 4, 5] . | Sequence: A sequence is a set of instructions that are performed in the same order.#Creating a sequence sequence_example = [1, 2, 3, 4, 5] . | Selection: Selection is a process of choosing an appropriate path or action based on a given condition.#Creating a selection selection_example = [i for i in sequence_example if i % 2 == 0] . | Iteration: Iteration is the process of repeating a sequence of instructions until a certain condition is met.#Creating an iteration for i in sequence_example: print(i) . | Expressions: An expression is a combination of values, variables, and operators that evaluates to a single value. . | Comparison Operators: Comparison operators are used to compare two values. Examples include the &gt;, &lt;, ==, and != operators. . #Creating a comparison operator x = 5 y = 6 x_less_than_y = x &lt; y . | Booleans Expressions and Selection: Boolean expressions are expressions that evaluate to either true or false. They are used to control selection statements.#Creating a Boolean expression my_bool = True . | Booleans Expressions and Iteration: Boolean expressions are used to control looping statements such as while and for loops. . | Truth Tables: A truth table is a table that shows the truth values of a logical expression. . #Creating a truth table truth_table = { True: &#39;Yes&#39;, False: &#39;No&#39; } . | Characters: A character is a single letter, number, or symbol. . | Strings: A string is a sequence of characters. . #Creating a string string_example = &quot;Hello World&quot; . | Length: The length of a string is the number of characters it contains.#Calculating the length of a string string_example_length = len(string_example) . | Concatenation: Concatenation is the process of combining two strings together to form a single string.#Concatenating two strings concatenated_string = string_example + &quot;!&quot; . | Upper: Upper is a method that converts all the characters of a string to uppercase.#Changing a string to upper case upper_string = string_example.upper() . | Lower: Lower is a method that converts all the characters of a string to lowercase.#Changing a string to lower case lower_string = string_example.lower() . | Traversing Strings: Traversing a string means to access each character of the string in sequence.#Traversing a string for char in string_example: print(char) . | Python If, Elif, Else conditionals: Python If, Elif and Else statements are used to control the flow of the program based on a certain condition.#Creating a simple if statement if x &lt; 10: print(&quot;x is less than 10&quot;) . | Nested Selection Statements: Nested selection statements are selection statements that are nested inside of other selection statements.#Creating a nested selection statement if x &gt; 5: if x &lt; 10: print(&quot;x is between 5 and 10&quot;) . | Python For, While loops with Range: Python For, While loops with Range: The Python For and While loops are used to iterate over a range of values.#Creating a for loop with a range for i in range(10): print(i) . | Python For, While loops with List: The Python For and While loops are used to iterate over a list of values.#Creating a for loop with a list for item in list_example: print(item) . | Combining loops with conditionals to Break, Continue: Combining loops with conditionals can be used to break out of a loop or continue to the next iteration of the loop. python #Creating a for loop with a break for i in range(10): if i == 5: break print(i) | Creating a for loop with a continue . for i in range(10): if i == 5: continue print(i) . 29. &lt;mark&gt;Procedural Abstraction:&lt;/mark&gt; Procedural abstraction is the process of breaking a problem down into smaller, more manageable parts. python def add_ . Python Def procedures: A Python Def procedure is a function that is defined using the Python Def keyword. . | Parameters: Parameters are the variables that are passed to a function. . | Return Values: Return values are the values that a function returns once it has been executed. . | Procedural Abstraction, Python Def procedures, Parameters, Return | .",
            "url": "https://taiyoi.github.io/Compsci22/2022/12/12/Vocab.html",
            "relUrl": "/2022/12/12/Vocab.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Lesson 3.14-3.15",
            "content": "Hacks . Write a program that uses a library/libraries in any sort of manner. | Explain your work/code | . . Unit 3 sections 14 and 15 Notes . A software library contains procedures that can be used in the creation of new programs. | Existing segments of code can come from internal or external sources, ie. libraries or previously written code. | The use of libraries simplifies the task of creating complex programs. | Application program interfaces (APIs) are specifications for how the procedures in a library behave and can be used. | Documentation for a library or API is necessary in understanding the key behaviors provided by the API/library and how to utilize them in your work. . | A library is a collection of code from an external source that can be used to add functionality to a program. . | Libraries are very useful, as they can be used to save time and effort in the development process. | Libraries are usually included in a program using a special keyword called &quot; .&quot; This keyword tells the program to look for the library and use its code. | . Lesson 3.15.1 . 1) Randomization generates a value between two numbers. For example RANDOM(1,3) may result as 1 or 2 or 3, either one of those. . 2) Now if we look into our day to day life we can see that randomization is all around us. . 3) In order to use the random function we have to first import random at the very beginning. . Now lets look at the code below right here. . 1) The lowest number that will be generated is 0 for answer 1 and for answer2, the lowest that will be generated is 1 so the lowest number that can be generated for answer 3 would be 1. . 2) The highest number that will be generated to answer1 is 3 and the highest number that will be generated for answer 2 is 8 so the highest number for answer 3 would be 11. . 3) The range of numbers that answer 3 could print out would be from 1 to 11. . Hacks Summary . Hacks 3.14.1 . Write a program that uses a library/libraries in any sort of manner. | Explain your work/code | . import math A = 16 print(math.sqrt(A)) #I imported the math library and it helped me be able to calculate the sqrt of A. . Hacks 3.15.1 . Write a few lines of code that implements the import function | . import math A = 16 print(math.sqrt(A)) #I imported the math library and it helped me be able to calculate the sqrt of A. . Define what an import random function do . The import random loads the random module, which contains a number of random number generation-related functions . | List a few other things that we can import other than random . | TensorFlow. . | NumPy. | SciPy. | Pandas. | Matplotlib. | Keras. | SciKit-Learn. | PyTorch. | . Hacks 3.15.2 . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. | . import random #imports the random library spinner = random.randint(1,8) #assigns the spinner variable the random generator #if spinner &lt;=3 then it will be green and so on for each of the other sections. if spinner &lt;= 3: print(&quot;Green&quot;) if spinner &lt;= 5: print(&quot;Blue&quot;) if spinner &lt;= 6: print(&quot;Purple&quot;) if spinner &lt;= 7: print(&quot;Red&quot;) if spinner &lt;= 8: print(&quot;Orange&quot;) . Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? | . The numbers that can be outputted from “RANDOM(12,20) are 12,13,14,15,16,17,18,19, or 20. Anything besides those numbers are excluded. . Method | Description . seed() | Initialize the random number generator . getstate() | Returns the current internal state of the random number generator . setstate() | Restores the internal state of the random number generator . getrandbits() | Returns a number representing the random bits . randrange() | Returns a random number between the given range . randint() | Returns a random number between the given range . choice() | Returns a random element from the given sequence . choices() | Returns a list with a random selection from the given sequence . shuffle() | Takes a sequence and returns the sequence in a random order . sample() | Returns a given sample of a sequence . random() | Returns a random float number between 0 and 1 . uniform() | Returns a random float number between two given parameters . betavariate() | Returns a random float number between 0 and 1 based on the Beta distribution (used in statistics) . expovariate() | Returns a random float number based on the Exponential distribution (used in statistics) . gammavariate() | Returns a random float number based on the Gamma distribution (used in statistics) . gauss() | Returns a random float number based on the Gaussian distribution (used in probability theories) . lognormvariate() | Returns a random float number based on a log-normal distribution (used in probability theories) . normalvariate() | Returns a random float number based on the normal distribution (used in probability theories) . vonmisesvariate() | Returns a random float number based on the von Mises distribution (used in directional statistics) . paretovariate() | Returns a random float number based on the Pareto distribution (used in probability theories) . weibullvariate() | Returns a random float number based on the Weibull distribution (used in statistics) .",
            "url": "https://taiyoi.github.io/Compsci22/2022/12/12/Lesson14-5.html",
            "relUrl": "/2022/12/12/Lesson14-5.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Lesson 3.12-3.13 hacks",
            "content": "Units 3.12 and 3.13 Notes . Essential Knowledge: . A procedure is a named set of instructions that can take in parameters and return values. May be called &quot;method&quot; or &quot;function&quot; in different programming languages. | . | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | Procedures can be classified as sequencing, selection, and iteration. How? | . Example: . What is the procedure&#39;s name? | What are the parameters? | What did the procedure return? | . . To determine the result of a procedure or any code, you must follow the code line by line and see what each one does . | Using syntax, you can determine the result by . function parameters | return value and statements | . | . A return statement exits a function and instructs python to continue executing the program and to return a certain value . | Value can be string, a tuple, or any other type that is being sent back to the main program . | . . Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | Abstraction - the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code. | . . Procedure - a module of code that is created to complete a certain task, this is basically a function | Procedure Name - the name that is given to a function/procedure | Parameters - a variable that is used in a function to allow for data to be imported into a function | Arguments - a way to provide information to a function, usually defined outside a function and then imported into a function with parameters . | parameters being used to manage complexity . parameters storing variables | parameters storing arguments | . | calling functions with procedure names choosing procedure names | calling procedures in python and javascript | . | . def function(a,b): # function is defined print(a+b) # prints output of variables function(1,2) # one instance that it can be used function(2,3) # another instance . 3 . 5 . Hacks 3.12 3.13 . Define procedure and parameter in your own words Procedures or methods are basically the instructions of a function but are assigned to a variable. Unlike assigning a singular item to a class, you assign a set of instructions. Parameters are the part of a function that include data which allow the function to work. | Here is an example of both being put into use . num1=2 num2=3 def addition(num1, num2): #the procedure is addition, the parameters are num1 and num2 sum = num1 + num2 return sum print(addition(num1, num2)) #here we are calling the function addition and printing it . 5 #this is the output . Paste a screenshot of completion of the quiz | . Define Return Values and Output Parameters in your own words Return values are the output of the procedure... It basically &quot;returns&quot; what the procedure does. Output Parameters are essentially the same as regular parameters | def addition(num1, num2): #the procedure is addition, the parameters are num1 and num2 sum = num1 + num2 return sum #this is the return function . 5 #this is the return output . Code a procedure that finds the square root of any given number. (make sure to call and return the function) | import math x = 9 #parameter def sqrt(x): return math.sqrt(x) print(sqrt(x)) #calling the function and printing . Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective | Abstracting away your program logic into separate, modular functions is effective because it helps to reduce code duplication and it is easier to manage in general. . Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) | x = 4 y = 3 #find the solution to a simple arithmetic equation: 5(x+y) def mathematics(x, y): sum = x + y return sum/5 print(mathematics(x, y)) . Abstraction was necessary because it helped to reduce the clutter of the function. If I were to take sum and make another function dividing sum by 5, I would need make a block of code and I wouldn&#39;t be able to call it again when I needed to. . Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | Topic 3.13 (3.C): . Define procedure names and arguments in your own words. | Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers -idk | . | # is a separate element in the list def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count # example usage: s = &quot; This is a test string! Don&#39;t you think this is cool? &quot; a_count = count_words_starting_with_a_in_string(s) d_count = count_words_starting_with_d_in_string(s) print(&quot;Words starting with a:&quot;, a_count) print(&quot;Words starting with d:&quot;, d_count) . Define procedure names and arguments in your own words. | Procedure names are the names given to a method to produce an output for example: . Arguments are basically the data that is inputted into the function for example: . x = 1 # x and y are parameters that will be inputted into the procedure. y = 2 def matematicas(x, y): #matematicas would be the procedure name. addition = x + y return addition print(matematicas(x,y)) 3.0 . Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | x = 1 y = 2 . addition . . subtraction . . divide . . multiply . . . Extra credit . import math def hypotenuse(leg1, leg2): # notice we&#39;re using this &lt;var&gt; * &lt;var&gt; syntax multiple times? # this has multiple drawbacks: # - it&#39;s repetitive and makes the code longer # - if we wanted to change the operator being # applied to `leg1` and `leg2`, we&#39;d have to do it twice! leg1_squared = leg1 * leg1 leg2_squared = leg2 * leg2 return math.sqrt(leg1_squared + leg2_squared) ## VERSUS ## # this works, but let&#39;s try to write the &quot;squared&quot; variable assignment statements more concisely.... def square(a): return a * a def hypotenuse_abstracted(leg1, leg2): # not only is this shorter, but we can now: # - better understand the code at a glance--we know exactly # what `square` should do # - change the operator in a single place (`square`) rather than # multiple times within this hypotenuse function leg1_squared = square(leg1) leg2_squared = square(leg2) return math.sqrt(leg1_squared + leg2_squared) ## EXTRA CHALLENGE ## # is it possible to write the `hypotenuse` function in a single line? def hypotenuse_abstracted2(leg1, leg2): return math.sqrt(square(leg1)+square(leg2)) print(hypotenuse_abstracted2(3,4)) assert hypotenuse(3, 4) == hypotenuse_abstracted(3, 4) == 5 . 5.0 .",
            "url": "https://taiyoi.github.io/Compsci22/2022/12/12/Lesson12-13-hacks.html",
            "relUrl": "/2022/12/12/Lesson12-13-hacks.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Algorithms and Logic",
            "content": "Vocabulary . Truth Table A truth table is a breakdown of a logic function by listing all possible values the function can attain. Such a table typically contains several rows and columns, with the top row representing the logical variables and combinations, in increasing complexity leading up to the final function. . | Linear Sequence of code The order of executions is strictly from top to bottom. This is good for learning, but is typically a poor method for an Algorithm! This was my 1st exploration above. . | Procedure (Function) A Procedure is a set of code instructions that has been abstracted into logical parts. Each code abstraction is called &quot;Procedural Abstraction&quot;. . | AND . | OR | XOR | NOT | . def xor(x,y): return (x or y) and not (x and y) # The boolean function def F(A, B, C, D): P = xor(A, B) Q = xor(C, D) R = xor(P, Q) return R # Translates between &#39;T&#39;/&#39;F&#39; and True/False: def f(a,b,c,d): t = &#39;T&#39; (A,B,C,D) = (a==t, b==t, c==t, d==t) R = F(A, B, C, D) return &quot;FT&quot;[R] print(&quot;Truth Table&quot;) print() print(&quot;A B C D | f(A,B,C,D)&quot;) print(&quot;========|===========&quot;) r = &quot;TF&quot; for a in r: for b in r: for c in r: for d in r: print(a, b, c, d, &quot;| &quot;, f(a, b, c, d)) . Truth Table A B C D | f(A,B,C,D) ========|=========== T T T T | F T T T F | T T T F T | T T T F F | F T F T T | T T F T F | F T F F T | F T F F F | T F T T T | T F T T F | F F T F T | F F T F F | T F F T T | F F F T F | T F F F T | T F F F F | F .",
            "url": "https://taiyoi.github.io/Compsci22/2022/12/07/ALGORITHMS.html",
            "relUrl": "/2022/12/07/ALGORITHMS.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Lesson 3.12 & 3.13",
            "content": "Topic 3.12 (3.A) Calling &amp; Understanding Procedures - Kaiden &amp; Amay . Overview: Learning Objectives . Basics of Procedures | Calling Procedures | Determine Results of Procedures | . What is a procedure? . Essential Knowledge: . A procedure is a named set of instructions that can take in parameters and return values. May be called &quot;method&quot; or &quot;function&quot; in different programming languages. | . | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | Procedures can be classified as sequencing, selection, and iteration. How? | . Example: . What is the procedure&#39;s name? | What are the parameters? | What did the procedure return? | . x = 5 y = 3 def multiply(x, y): product = x * y return product answer = multiply(x, y) print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . The product of 5 times 3 is 15 . Calling Procedures . To call a procedure you would write the name of the procedure followed by the parentheses with the parameters of the procedure | Procedures do not require parameters, but the parentheses must be there | . Ex: . procedureName(parameter1, parameter2, ...) | How would you call this procedure? | . num = 5 def math(x): op1 = x * 2 op2 = op1 - 9 return op2 . Quiz (Part of Hacks) . Complete this quiz: . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Question: What is are correct names for a procedure? A) Method B) Function C) Both Answer: c Correct :) Question: What is a procedure? A) Sequencing B) Selection C) Iteration D) All Answer: D Correct :) Question: Use this for following question: def inchesToFeet(lengthInches): lengthFeet = lengthInches / 12 return lengthFeet What is the procedure name, the parameter, and what the procedure returns? A) feetToInches, lengthInches, lengthMeters B) inchesToFeet, lengthInches, lengthFeet C) inchesToFeet, lengthFeet, lengthInches D) lengthInches, inchesToFeet, lengthFeet Answer: B Correct :) Score: 3 / 3 . Determining the Result of a Procedure . To determine the result of a procedure or any code, you must follow the code line by line and see what each one does . | Using syntax, you can determine the result by . function parameters | return value and statements | . | . To use return values, you have to write the syntax return followed by the expression you would like to return var | . A return statement exits a function and instructs python to continue executing the program and to return a certain value . | Value can be string, a tuple, or any other type that is being sent back to the main program . | . Ex: . def divide(num1,num2): x = num1/num2 return x . what is x being assigned to inside the function? . | As a reminder, to use function parameters, you would have to write the syntax name of the function followed by the parameters needed in parentheses . | Function parameters are the parameters that are used when calling the function in order to get a result. . | . What are the function parameters in this procedure? . What values are being passed to the function? . def function(first_name, last_name): print(first_name + &quot; &quot; + last_name) function(&quot;Peter&quot;,&quot;Parker&quot;) function(&quot;Safin&quot;, &quot;Singh&quot;) . Peter Parker Safin Singh . In the cell above, the function is being called twice, which shows the importance of function in order to accomplish the same thing with different parameters. . What is wrong with the function? . Can you translate the binary numbers into decimal notation? . def find_cube(num): result = bin(num * num * num) cube = find_cube(3) cube2 = find_cube(4) print(&#39;Cube:&#39;,find_cube(3)) print(&#39;Cube:&#39;,find_cube(4)) . Cube: None Cube: None . Once again, I called the function twice, which is useful, because it allows the coder to do the same thing multiple times with different arguments. . Topic 3.13 (3.B) Managing Complexity - Safin . Overview: Learning Objectives . increasing code modularity using procedures abstracting large problems into smaller ones | extract shared features to reduce code duplication | . | using parameters to reuse procedures | improving code readability with procedures | manipulating procedure logic and preserving outputEssentially, we&#39;ll learn how and when it is appropriate to construct a function (procedural abstraction) and what its benefits are . | . Vocabulary: . Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | Abstraction - the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | . Parameters . As we saw above, parameters can be used to make functions work with multiple different inputs. Let&#39;s review the following code . # these parameters are the inputs to the function, and they are used # inside the function to perform some operation def add(x, y): # inside the function, we can use the x and y parameters just like # we would use any other variable result = x + y return result # to call the function and pass in values for the x and y parameters, # we simply provide the values as arguments in the function call result = add(2, 3) print(result) # should output 5 # we can also use variables as arguments in the function call x = 5 y = 10 result = add(x, y) print(result) # should output 15 # we can even use the result of one function call as an argument # in another function call result = add(add(2, 3), add(4, 5)) print(result) # should output 14 . 5 15 14 . In the above example, parameters were used to create a function that could be called multiple times without code duplication. . Modularity . In the following example, we will use specialized functions and explain their benefits: . import math def hypotenuse(leg1, leg2): # notice we&#39;re using this &lt;var&gt; * &lt;var&gt; syntax multiple times? # this has multiple drawbacks: # - it&#39;s repetitive and makes the code longer # - if we wanted to change the operator being # applied to `leg1` and `leg2`, we&#39;d have to do it twice! leg1_squared = leg1 * leg1 leg2_squared = leg2 * leg2 return math.sqrt(leg1_squared + leg2_squared) ## VERSUS ## # this works, but let&#39;s try to write the &quot;squared&quot; variable assignment statements more concisely... def square(a): return a * a def hypotenuse_abstracted(leg1, leg2): # not only is this shorter, but we can now: # - better understand the code at a glance--we know exactly # what `square` should do # - change the operator in a single place (`square`) rather than # multiple times within this hypotenuse function leg1_squared = square(leg1) leg2_squared = square(leg2) return math.sqrt(leg1_squared + leg2_squared) ## EXTRA CHALLENGE ## # is it possible to write the `hypotenuse` function in a single line? def hypotenuse_abstracted2(leg1, leg2): return math.sqrt(square(leg1)+square(leg2)) print(hypotenuse_abstracted2(3,4)) assert hypotenuse(3, 4) == hypotenuse_abstracted(3, 4) == 5 . 5.0 . Abstracting Shared Features . Say we want to create a set of functions that count the number of words in a sentence that start with a certain character. We want to create... . count_words_starting_with_a_in_string(sentence) | count_words_starting_with_d_in_string(sentence) | . In order to count words starting with a certain character, we&#39;ll first need to split up the sentence into words. This behavior will be shared across both functions we intend to create, so procedural abstraction is appropriate here. . # is a separate element in the list def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count # example usage: s = &quot; This is a test string! Don&#39;t you think this is cool? &quot; a_count = count_words_starting_with_a_in_string(s) d_count = count_words_starting_with_d_in_string(s) print(&quot;Words starting with a:&quot;, a_count) print(&quot;Words starting with d:&quot;, d_count) . Words starting with a: 1 Words starting with d: 1 . In the above example, we have: . defined several functions that perform different tasks related to processing a string | abstracted away shared behavior for both functions that count the number of words starting with a specific character in a string | . Topic 3.13 (3.C) Developing Procedures - David &amp; Alex . Overview: Learning Objectives . parameters being used to manage complexity parameters storing variables | parameters storing arguments | . | calling functions with procedure names choosing procedure names | calling procedures in python and javascript | . | . Vocabulary: . Procedure - a module of code that is created to complete a certain task, this is basically a function | Procedure Name - the name that is given to a function/procedure | Parameters - a variable that is used in a function to allow for data to be imported into a function | Arguments - a way to provide information to a function, usually defined outside a function and then imported into a function with parameters | . Functions - Basic Structure . Functions can be created in many different languages. Below are some examples in Collegeboard&#39;s format, Python, and Javascript. . Collegeboard . Above, the function is defined as PROCEDURE, which tells the coder that this is a function. The function is then named with procName, which is simply how the function is identified. parameter1, parameter2,... are variables that can be predefined elsewhere and repeatedly used in the same function. This will be gone over later in the lesson so don&#39;t worry if you don&#39;t get it. block of statements are just things that you would place inside a function to complete a certain task, such as print() in Python. . Python . def function(a,b): # function is defined print(a+b) # prints output of variables function(1,2) # one instance that it can be used function(2,3) # another instance . 3 5 . Python is similar to the Collegeboard example, where def defines the function, function, and then is followed by parameters a,b, which can later be interchanged with any numbers as shown with function(1,2). The numbers are called arguments, which are information provided to the function with parameters. In this case, the parameters are being added within the function and then printed. . Javascript . function Function(a,b) { return a + b; } Function(1,2) Function(2,3) . 3 5 . Javascript in this case is almost the exact same as Python, the only differences being that function is called with function and that the formatting is a little different. Otherwise, it does the exact same thing as the Python example. . Example . function div(a,b) { return (a+b)/2 } div(3,7) . What is the procedure name? | What are the parameters? | What operation is being done? | what would the output of this code be? | . Parameters . In functions, there are sometimes parameters that the functions have in which you can call to the function giving arguements that will provide input to the function For example: | . def function(num1, num2): if num1 &gt; num2: print(&quot;num1 is greater than num2&quot;) elif num1 &lt;num2: print(&quot;num1 is less than num 2&quot;) num1= 6 num2 = 8 function(num1,num2) . num1 is less than num 2 . In this function, it takes in two parameters num1 and num2 | Whithin this function it uses conditionals to determine if num 1 is larger or smaller than num2 | When calling to this function we must put in two arguements, num1 and num2 respectively | We put in 6 for num1 and 8 for num2 and the algorithm runs and gives us an outcome | . This basic function in python can be recreated in Javasript . function compare(a,b) { if(a&gt;b) { console.log(&quot;a is greater than b&quot;) } else if (a&lt;b) { console.log(&quot;a is less than b&quot;) } } // How do you call to this function? . what are the parameters? | What is the output? | what are the arguements? | . Calling functions . When calling functions, you have to ask yourself some questions Does the function have any parameters? | does the parameter have output? | . | Depending on these answers, the way you will call to a function will be different | . Example where it does does have parameters and gives output . def InchestoFeet(inches): Feet = 0 Feet = inches / 12 return Feet result = InchestoFeet(24) print(result) . 2 . If you look closely, there is a return at the end of the function, this returns a value when you call the function | This is why we have to set a variable, in this case result equal to the output of the function. | Also one thing to notice is that this function also takes in a parameter called inches | . Here&#39;s an example of calling functions in HTML with Javascript: . HI . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;HI&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a + b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; . Hacks . Topic 3.12 (3.A): . Define procedure and parameter in your own words | Paste a screenshot of completion of the quiz | Define Return Values and Output Parameters in your own words | Code a procedure that finds the square root of any given number. (make sure to call and return the function) | Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective | Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) | Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | Topic 3.13 (3.C): . Define procedure names and arguments in your own words. | Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | Rubric . Each hack is worth 0.3 points . To get 0.3 points for each hack you must: Complete each hack correctly and completely | Submit by 11:59PM on Friday, December 9 | . | The last 0.1 points are if you do a good job on the binary calculator. | Anything missing or submitted late will have points deducted. | .",
            "url": "https://taiyoi.github.io/Compsci22/2022/12/04/lesson3.12_3.13.html",
            "relUrl": "/2022/12/04/lesson3.12_3.13.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Simulations- Unit 3 Section 16 Lesson",
            "content": "3.16 Intro to Simulations - Alexa . What is a simulation? A simulation is an imitation of a situation or process | Aka a virtual experiment | . | . Guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Examples of Simulations: . Simulations are used all the time over many different industries . testing safety of a car | games | testing the efficiency of a parking lot | testing a new train route | . Simulation vs. Experiment . Experiment definition: procedure undertaken to make a discovery, test a hypothesis, or demonstrate a known fact | . So, why use a simulation? . Advantages: Can be safer | More cost-effective | More efficient | More data in less time | . | Disadvantages: Not as accurate as experiments | outside factors not included (ex: in rolling dice simulation gravity and air resistance) | . | When do you not use a simulation? when a situation already has set results/data (won&#39;t change) | examples: a score in a game, most purchased food, average yearly wage | . | . leads into real life game example: . . . A Real Life Example: Four Corners - Lydia &amp; Ava . an example of a simulation and experiment = the game of 4 corners | games are simulations! | We are going to play a round of 4 corners here in class. This game is a real life version of our simulation. | Mr. Mortensen will be the person in the middle choosing corners. | Everyone will choose a corner, and if your corner is chosen, you are out! | . | . The rules of the game: . a person stands in the center of a room and the 4 coners are labeled 1-4 | Every player chooses a corner while the person in the middle closes their eyes | person in the middle chooses/calls out a number when instructed | every player in the chosen corner is now out | contine until there is a winner! | Let&#39;s play! . Below is the simulation of the four corners game! . import random status = &quot;in&quot; while status != &quot;out&quot;: chooseCorner = input(&quot;What corner do you choose?&quot;) corner = random.randint(1,4) if int(chooseCorner) == corner: status = &quot;out&quot; print(&quot;You chose corner number &quot; + chooseCorner + &quot; and you&#39;re OUT&quot;) else: print(&quot;You chose corner number &quot; + chooseCorner + &quot; and are still in!&quot;) . You chose corner number 2 and are still in! You chose corner number 3 and are still in! You chose corner number 4 and you&#39;re OUT . Comparing Experiment to Simulation Code: . Mr. Mortensen (person in the middle) = random.randint | if statement = if player is out | else = safe/continue | while loop = repeats process until there is a winner of the game | . DEBRIEF QUESTIONS: . Why is it better to code simulations than experiement in real life? | What makes this game a simulation? | What are its advantages and disadvantages? | Would an experiment be better in this situation? (raise hands for each team) | . . Hack #1 . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 (collegeboard based questions) . Simulations Quiz (either screenshot or paste quiz in your notebook): | . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . . . Rolling a Dice Example - Sri . Below is a simulation of rolling dice! Examine the code and think about how this simulation works and its purpose! . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 6.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 6) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-6] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) print(&quot;you rolled:&quot;, roll_results) . you rolled: [5, 1, 2] . . . Game of Life - Lydia &amp; Ava . Below is a simulation of the Game of Life, originally written by John Horton Conway. Mr. Mortensen has this game on the APCSP site and we think that it is a great example of an interactive simulation. . What it is . This game is an unpredictable cellular automaton | automaton = simulates and imitates human life, hence why this is called the game of life | After creating the initial configuration, the game evolves without pattern | . How it works . Cells in this game are alive or dead, similar to binary where they are on or off | The user created an initial configuration of cells on the grid, and presses play (tap the squares on the grid) | a cells&#39;s status (alive or dead, on or off) depends on the surrounding 8 cells status (surrounding 8 boxes). Here are the rules: The birth rule= a dead cell (blue box) that is surrounded by at least 3 alive cells (yellow boxes), will become alive | The death rule= an alive cell (yellow) with no or only one surviving cell around it dies (becomes blue) | Cell survival= an alive cell (yellow) with 2 or 3 alive neighboring cells will stay alive | . | . Try it Out! . Use the grid below to create cell figurations, press play, and watch your cells die, live, and move around! . . Remix of Game of Life . start step . . Hack #3 . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . . . Hacks Overview . Use these guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Hack #1 (0.3) . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 (0.1) . Simulations Quiz (either screenshot or paste quiz in your notebook) | . Hack #3 (0.2) . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 (0.3) . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . Extra Credit (0.1) . For the extra 0.1: try coding a simple simulation and describe it (guiding question) | .",
            "url": "https://taiyoi.github.io/Compsci22/studentlesson/simulations",
            "relUrl": "/studentlesson/simulations",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "APCSP Student Teaching",
            "content": "Unit 3 Section 1-2 Notes . A variable is an abstraction inside a program that holds a value, where each variable has associated data storage that represents a single value at a time (However, if the value is a collection type such as a list, then the value can contain multiple values). | Variables typically have meaningful names that helps with the overall organization of the code and understanding of what is being represented by the variables | Some programming languages provide a variety of methods to represent data, which are referenced using variables 9Booleans, numbers, lists, and strings) | One form of a value is better suited for representation than another. | . Units 3 section 1-2 Hacks . Questions (College Board&#39;s Essential Knowledge): . What exactly IS a variable? | A variable is an abstraction inside a program that holds a value, where each variable has associated data storage that . What is the best data type to represent someone&#39;s dog&#39;s name? | A string . Why is it important to give variables specific names before containing values? | So you can call them whilst writing code. . What is the best way to represent someone&#39;s phone number? | You would use a string because you are not using the numbers of the phone number to compute anything. . In your own words, briefly explain by writing down what an assignment operator is | . An Assignment operator is essentially the equal sign in coding. . In Collegeboard pseudocode, what symbol is used to assign values to variables? | . &quot;&lt;--&quot; . A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? | . The command would display 22. . What is a list? | . a list is a sequence of elements with each element being a variable. . What is an element | . elements are the items inside a list . What is an easy way to reference the elements in a list or string? | . Using print . What is an example of a string? | . A phone number . Create a list with indices | Index a part of the list that you created. | Try to index from the end | . NamesList = [&quot;Taiyo&quot;, &quot;Luna&quot;, &quot;Parav&quot;, &quot;Ethan&quot;] print(NamesList[1]) print(NamesList[3]) . Luna Ethan . The following code is incomplete. Its intended purpose is to increase three numbers, all of which ask for user input, by an amount specified the user. The input code is abstracted, but the actual logic isn’t connected to the abstraction. . num1=input(&quot;Input a number. &quot;) num2=input(&quot;Input a number. &quot;) num3=input(&quot;Input a number. &quot;) add=input(&quot;How much would you like to add? &quot;) # Add code in the space below numlist = [int(num1), int(num2), int(num3)] print(&quot;User submitted numbers&quot;, numlist) print(&quot;Plus &quot; + add) # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in range (len(numlist)): numlist[i-1] += int(add) print(&quot;Result: &quot;, numlist)1 . User submitted numbers [1, 1, 1] Plus 1 Result: [2, 2, 2] . . . –UPDATE: fixed Steven’s hack, got 0.18/0.20 on Nathan’s hack, got 0.15/0.20 on Noor’s hack, full credit for Ederick’s hack (leniency).– Didn’t do Noor’s or Steven’s hacks and got 0.1 on Nathan’s hacks . 0.93/1 . . Unit 3 Section 3-4 Notes . An algorithm is a finite set of instruction that accomplish a task, it can be expressed by natural language, diagrams, and various other ways. . | Sequencing, selection, and iteration. . | Every algorithm can be created by a mixture of sequencing, selection, and iteration . | . Unit 3 Section 3-4 Hacks . You will describe the different parts of an algorithm, sequencing, selection, and iteration in the image below. | sequencing: The order of how to do a process | Selection: Allows an algorithm to make a decision based on the status if a condition is met | Iteration: A loop of doing something again and again. | . num1 = 5 num2 = num1 3 num3 = num2 / num1 (9 % 2) 4 result = (num3 % num1 + num2) % num3 3 / 5 . The Answer to this algorithmic expression is 3 . HACK for 3.3! CROSS WORD PUZZLE! . . example of how to do it in your blog: . 7 across - Baloney . Answers for the crossword puzzle . Iteration | Selection | Sequence | . 0.9/1 on the hacks for this section . . Hacks sections 5-6 . Explain in your own words what each logical operator does | . Not: Not displays the exact opposite of whatever data is inputted | And: And can help determine if two conditions are met | Or: Can help determine if one of the conditions is met | Code your own scenario that makes sense for each logical operator | . Running = False result = not(Running) print(result) . True . Money = 1000 Coins = 100 if Money &gt;= 100 and Coins &gt; 20: print(&quot;You Rich&quot;) . You Rich . Money = 1 Coins = 11 if Money &lt;= 0 or Coins &lt; 20: print(&quot;You Broke&quot;) . You Broke . 1 point for defining all the key terms in your own words. 0.5 points if you use examples that show you truly understand it. | . Selection: A piece of code that is determined by the output of true/false | Algorithm: a process or set of rules to be followed in calculations | Conditional Statement / If-Statement: a set of rules performed if a certain condition is met | 1 point for writing a program that uses binary conditional logic. 0.5 points if it is original and shows complexity | . x = 15 if x % 2 == 0: print(x, &quot;is even&quot;) else: print(x, &quot;is odd&quot;) . 15 is odd . 1 extra point for each challenge that you program or pair program. | 0.5 points for your review ticket looking nice, or you convincing me that it does. | 1 point for each and any extra work you do that helps show your understanding of conditionals. | . Hacks . Create 3 different flow charts representing nested statements and transfer them into code. | Create a piece of code that displays four statements instead of three. Try to do more if you can. | Make piece of code that gives three different recommendations for possible classes to take at a school based on two different conditions. These conditions could be if the student likes STEM or not. | . . . day = True night = False if day == True: print(&quot;wake up&quot;) if night == True: print(&quot;sleep&quot;) else: print(&quot;it is the afternoon&quot;) . wake up it is the afternoon . Units 3.9 and 3.11 Notes . Three main components of an algorithm 1. Selection 2. Sequence 3. Iteration - Two pieces of code that look similar don&#39;t always produce the same things. - make notes in code developing algorithms when creating an algorithm, it is good to outline its process before coding | it ensures that it is sequenced correctly | . . Units 3.9 and 3.11 Hacks . why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) | . This is because when you are programming, sometimes code can produce different results which is sub-optimal for you. . for the converted conditional to boolean conversion(0.10) | . total: 0.25 | . isnight = False isday = True if isnight == True: print(&quot;go to sleep&quot;) else: if isday == True: print(&quot;Wake up and work&quot;) . Wake up and work . isnight = False isday = True eat = not(isnight) and isday if eat == False: print (&quot;dont eat&quot;) if eat == True: print(&quot;go eat&quot;) . go eat . Includes both a flowchart AND natural language | Working code of the same algorithm | Incorporates selection AND/OR iteration | Make it creative! | . goodreviews = True afford = False if goodreviews == True: print(&quot;Has good reviews&quot;) if afford and goodreviews == True: print(&quot;product is affordable, has good reviews, and you should purchase your product&quot;) if goodreviews == False: print(&quot;adjust your search and click on another product&quot;) if afford == False: print(&quot;adjust your search&quot;) . Has good reviews adjust your search . import random #sets variables for the game num_guesses = 0 user_guess = -1 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(0,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 0 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): num = input(&quot;What number?&quot;) #add something here return num #add something here #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if int(guess) &lt; int(number): print(&quot;Too low&quot;) #change this lower_bound = guess return lower_bound, upper_bound elif int(guess) &gt; int(number): print(&quot;Too high&quot;) #change this upper_bound = guess return lower_bound, upper_bound else: upper_bound, lower_bound = guess, guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) if int(upper_bound) == int(number): break else: print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 0 and 100. You guessed 100. Too high Guess a number between 0 and 100. You guessed 80. Too low Guess a number between 80 and 100. You guessed 87. Too high Guess a number between 80 and 87. You guessed 86. Too high Guess a number between 80 and 86. You guessed 84. Too high Guess a number between 80 and 84. You guessed 83. You guessed the number in 6 guesses! . . calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 | 92, 43, 74, 66, 30, 12, 1 | 7, 13, 96, 111, 33, 84, 60 | . | index = [12, 14, 43, 57, 79, 80, 99] index[x].sort() middle = int(len(index) / 2) print(middle) print(index[middle]) . 54.857142857142854 . index =[92, 43, 74, 66, 30, 12, 1] index.sort() middle = int(len(index) / 2) print(middle) print(index[middle]) . 45.42857142857143 . index = [7, 13, 96, 111, 33, 84, 60] index.sort() middle = int(len(index) / 2) print(middle) print(index[middle]) . 57.714285714285715 . . Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? | Set 2: 74 . Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . C because it is not sorted properly . | Units 3.12 and 3.13 Notes . Essential Knowledge: . A procedure is a named set of instructions that can take in parameters and return values. May be called &quot;method&quot; or &quot;function&quot; in different programming languages. | . | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | Procedures can be classified as sequencing, selection, and iteration. How? | . Example: . What is the procedure&#39;s name? | What are the parameters? | What did the procedure return? | . . To determine the result of a procedure or any code, you must follow the code line by line and see what each one does . | Using syntax, you can determine the result by . function parameters | return value and statements | . | . A return statement exits a function and instructs python to continue executing the program and to return a certain value . | Value can be string, a tuple, or any other type that is being sent back to the main program . | . . Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | Abstraction - the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | . . parameters being used to manage complexity parameters storing variables | parameters storing arguments | . | calling functions with procedure names . choosing procedure names | calling procedures in python and javascript | . bash def function(a,b): # function is defined print(a+b) # prints output of variables . | . function(1,2) # one instance that it can be used function(2,3) # another instance . . 3 . 5 . Hacks 3.12 3.13 . Define procedure and parameter in your own words Procedures or methods are basically the instructions of a function but are assigned to a variable. Unlike assigning a singular item to a class, you assign a set of instructions. Parameters are the part of a function that include data which allow the function to work. | Here is an example of both being put into use . num1=2 num2=3 def addition(num1, num2): #the procedure is addition, the parameters are num1 and num2 sum = num1 + num2 return sum print(addition(num1, num2)) #here we are calling the function addition and printing it . 5 #this is the output . Paste a screenshot of completion of the quiz | . Define Return Values and Output Parameters in your own words Return values are the output of the procedure... It basically &quot;returns&quot; what the procedure does. Output Parameters are essentially the same as regular parameters | def addition(num1, num2): #the procedure is addition, the parameters are num1 and num2 sum = num1 + num2 return sum #this is the return function . 5 #this is the return output . Code a procedure that finds the square root of any given number. (make sure to call and return the function) | x = 9 #parameter def sqrt(x): return math.sqrt(x) print(sqrt(x)) #calling the function and printing . 3.0 . Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective | Abstracting away your program logic into separate, modular functions is effective because it helps to reduce code duplication and it is easier to manage in general. . Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) | x = 4 y = 3 #find the solution to a simple arithmetic equation: 5(x+y) def mathematics(x, y): sum = x + y return sum/5 print(mathematics(x, y)) . 1.4 . Abstraction was necessary because it helped to reduce the clutter of the function. If I were to take sum and make another function dividing sum by 5, I would need make a block of code and I wouldn&#39;t be able to call it again when I needed to. . Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | Topic 3.13 (3.C): . Define procedure names and arguments in your own words. | Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | # is a separate element in the list def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count # example usage: s = &quot; This is a test string! Don&#39;t you think this is cool? &quot; a_count = count_words_starting_with_a_in_string(s) d_count = count_words_starting_with_d_in_string(s) print(&quot;Words starting with a:&quot;, a_count) print(&quot;Words starting with d:&quot;, d_count) . Words starting with a: 1 Words starting with d: 1 . Define procedure names and arguments in your own words. | Procedure names are the names given to a method to produce an output for example: . Arguments are basically the data that is inputted into the function for example: . x = 1 # x and y are parameters that will be inputted into the procedure. y = 2 def matematicas(x, y): #matematicas would be the procedure name. addition = x + y return addition print(matematicas(x,y)) 3.0 . Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | . sumbit . . here is the extra credit . import math def hypotenuse(leg1, leg2): # notice we&#39;re using this &lt;var&gt; * &lt;var&gt; syntax multiple times? # this has multiple drawbacks: # - it&#39;s repetitive and makes the code longer # - if we wanted to change the operator being # applied to `leg1` and `leg2`, we&#39;d have to do it twice! leg1_squared = leg1 * leg1 leg2_squared = leg2 * leg2 return math.sqrt(leg1_squared + leg2_squared) ## VERSUS ## # this works, but let&#39;s try to write the &quot;squared&quot; variable assignment statements more concisely... def square(a): return a * a def hypotenuse_abstracted(leg1, leg2): # not only is this shorter, but we can now: # - better understand the code at a glance--we know exactly # what `square` should do # - change the operator in a single place (`square`) rather than # multiple times within this hypotenuse function leg1_squared = square(leg1) leg2_squared = square(leg2) return math.sqrt(leg1_squared + leg2_squared) ## EXTRA CHALLENGE ## # is it possible to write the `hypotenuse` function in a single line? def hypotenuse_abstracted2(leg1, leg2): return math.sqrt(square(leg1)+square(leg2)) print(hypotenuse_abstracted2(3,4)) assert hypotenuse(3, 4) == hypotenuse_abstracted(3, 4) == 5 . 5.0 .",
            "url": "https://taiyoi.github.io/Compsci22/2022/11/30/College-Board-Student-teaching.html",
            "relUrl": "/2022/11/30/College-Board-Student-teaching.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Unit 3.17-3.18 Group Lesson Period 4",
            "content": "Hailstone numbers . def collatz(i): while i &gt; 1: print(i, end=&#39; &#39;) if (i % 2): # i is odd i = 3*i + 1 else: # i is even i = i//2 print(1, end=&#39;&#39;) i = int(input(&#39;Enter i: &#39;)) print(&#39;Sequence: &#39;, end=&#39;&#39;) collatz(i) . Sequence: 4 2 1 . Number of iterations . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(i) else: i = (i / 2) list_.append(i) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;&#39;) print(&#39;Number of iterations:&#39;, len(l) - 1) . Please enter a number: Number of iterations: 8 . Vocab . Collatz . The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . Hailstone numbers . The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples:Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No.&gt; ### Iteration The action or a process of iterating or repeating:such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . Undecidable problems . An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . Unsolvable problems . An unsolvable problem is one for which no algorithm can ever be written to find the solution. . Additional information . A problem posed by L. Collatz in 1937, also called the 3x+1 mapping, 3n+1 problem, Hasse&#39;s algorithm, Kakutani&#39;s problem, Syracuse algorithm, Syracuse problem, Thwaites conjecture, and Ulam&#39;s problem (Lagarias 1985). Thwaites (1996) has offered a £1000 reward for resolving the conjecture. Let a_0 be an integer. Then one form of Collatz problem asks if iterating . always returns to 1 for positive a_0. (If negative numbers are included, there are four known cycles (excluding the trivial 0 cycle): (4, 2, 1), (-2, -1), (-5, -14, -7, -20, -10), and (-17, -50, -25, -74, -37, -110, -55, -164, -82, -41, -122, -61, -182, -91, -272, -136, -68, -34).) . The members of the sequence produced by the Collatz are sometimes known as hailstone numbers. Conway proved that the original Collatz problem has no nontrivial cycles of length &lt;400. Lagarias (1985) showed that there are no nontrivial cycles with length &lt;275000. Conway (1972) also proved that Collatz-type problems can be formally undecidable. Kurtz and Simon (2007) proved that a natural generalization of the Collatz problem is undecidable; unfortunately, this proof cannot be applied to the original Collatz problem. . The Collatz algorithm has been tested and found to always reach 1 for all numbers &lt;=19·2^(58) approx 5.48×10^(18) (Oliveira e Silva 2008), improving the earlier results of 10^(15) (Vardi 1991, p. 129) and 5.6×10^(13) (Leavens and Vermeulen 1992). Because of the difficulty in solving this problem, Erdős commented that &quot;mathematics is not yet ready for such problems&quot; (Lagarias 1985). . The numbers of steps required for the algorithm to reach 1 for a_0=1, 2, ... are 0, 1, 7, 2, 5, 8, 16, 3, 19, 6, 14, 9, 9, 17, 17, 4, 12, 20, 20, 7, ... (OEIS A006577; illustrated above). Of these, the numbers of tripling steps are 0, 0, 2, 0, 1, 2, 5, 0, 6, ... (OEIS A006667), and the number of halving steps are 0, 1, 5, 2, 4, 6, 11, 3, 13, ... (OEIS A006666). The smallest starting values of a_0 that yields a Collatz sequence containing n=1, 2, ... are 1, 2, 3, 3, 3, 6, 7, 3, 9, 3, 7, 12, 7, 9, 15, 3, 7, 18, 19, ... (OEIS A070167). . The Collatz problem can be implemented as an 8-register machine (Wolfram 2002, p. 100), quasi-cellular automaton (Cloney et al. 1987, Bruschi 2005), or 6-color one-dimensional quasi-cellular automaton with local rules but which wraps first and last digits around (Zeleny). In general, the difficulty in constructing true local-rule cellular automata arises from the necessity of a carry operation when multiplying by 3 which, in the worst case, can extend the entire length of the base-b representation of digits (and thus require propagating information at faster than the CA&#39;s speed of light). . More information . Hacks/Assignment . Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. The more efficient the code, the higher your grade will be. (Algorithm Efficency) (.25) . Unit 3, Section 17: Algorithm Efficiency - Kush &amp; Yasha . What is Algorithm Efficiency? . Yasha - Algorithmic efficiency is an aspect of algorithmic programming that measures the number of steps needed to solve a problem. For instance, If I wanted to create a sorting algorithm that sorts numbers the numbers [2,4,5,1,3]from least to greatest, rather than having an algorithm that compares itself to the next number and swaps accordingly it would be more efficient if you had a program that scans through all the numbers and checks whether a number is smaller or bigger than the rest than and sorts accordingly. Both of the algorithms had the same objective, but one runs more efficiently than the other. . Here is an example of an inefficient algorithm: . def inefficientWay(numbers): # Then it loops over the numbers for i in range(len(numbers)): # Now it finds the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # Then it swaps the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(inefficientWay([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - This algorithm is inefficent because it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. This is an inefficient way to sort a list. . Kush - Here is an efficent way to sort a list: . def efficient_sort(numbers): # loop over the numbers for i in range(len(numbers)): # find the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # swap the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(efficient_sort([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - The difference in this algorithm is that it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. . How can you use algorithms to better your life: Mini activity . Yasha - Just for a second, think about all the tasks in your life that would work so much better automated. The sky&#39;s the limit. For an activity, write down or take a mental note of a task that you encounter in your day to day life, and think of ways where you can automate that task. An example of this would be me creating an algorithm for my morning routine. . tasks = [&quot;wake up&quot;, &quot;eat breakfast&quot;, &quot;brush teeth&quot;, &quot;go to school&quot;] def complete_tasks(tasks): for task in tasks: # code to complete each task goes here if task == &quot;wake up&quot;: print(&quot;Waking up now!&quot;) elif task == &quot;eat breakfast&quot;: print(&quot;Eating breakfast now!&quot;) elif task == &quot;go to school&quot;: print(&quot;Going to school now!&quot;) # and so on for each task in the list # call the function to complete the tasks complete_tasks(tasks) . Waking up now! Eating breakfast now! Going to school now! . Taking a heuristic approach to problems P1 . Kush - Sometimes when a problem has too many possibilities, a heuristic approach would be taken. let&#39;s use planes as an example. Imagine you were a musician on tour. You have shows in New Zealand, United States, Canada, and Russia. Well, what would be the shortest flight route so you can arrive at those destinations as fast as possible? You start in the United States. . Taking a heuristic approach to problems P2 . Kush - Well, since there are multiple possibilities, I chose to pick the countries closest to each other. The reason I chose this algorithm in particular is that it made the most sense. I had to start at United States, but then I went on to Canada, Russia, New Zealand, and then back to the United States. . Visual Representation . Hacks/assignment . Write 2 algorithms: One is efficent and one is innefficent, then explain why one is efficent while the other isn&#39;t. (.25) | Explain why one algorithm is more efficient than another using mathematical and/or formal reasoning. (.25) | use variables, if statements, and loops to program your algorithm and upload to jupyter notebooks/ fastpages. (.25) | .",
            "url": "https://taiyoi.github.io/Compsci22/2022/11/28/Quinn&Group.html",
            "relUrl": "/2022/11/28/Quinn&Group.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "APCSP FINAL",
            "content": "Quick Message . 01000011 01101111 01101101 01110000 01110101 01110100 01100101 01110010 00100000 01110011 01100011 01101001 01100101 01101110 01100011 01100101 00100000 01101001 01110011 00100000 01101101 01111001 00100000 01100110 01100001 01110110 01101111 01110010 01101001 01110100 01100101 00100000 01100011 01101100 01100001 01110011 01110011 . AP College Board Experience . This is a compliation of all of my work from this year’s AP college board quizzes . Questions/Difficulties . Overall, the questions were very difficult because I didn’t have much coding algorithm experience so I had to go online and do some researching. But overall, it started to make sense overtime. It was very similar to other algorithmic things in life like solving a rubix cube and math. . MCQ College Board PT.2 . I was having lots of trouble on the Internet portion of the APprep part. Although, I got all the answers correct last time the internet portion of the mc was difficult. The specific question: “Open protocols allow devices to specify how data packets are to be routed on the Internet in advance.” Stumped me because I didn’t really have much experience with routing on the internet. . Experience of Night At The Museum . Although the night of the museum event was only a 30 minute shift, I was able to view other classmates and other period’s projects. My group got a lot of feedback from other students as our project was not fully 100% finished. We got more inspiration from other projects. For example, changing the aesthetics of our project, adding more features such as a comment area, where you could comment on the different options of teams that we had. There especially was this one parent that questioned us about the mechanics and overall code and we were able to give them a satisfactory response and they gave us a suggestion on changing the colors of our site. I also had fun talking to others from other classes and socializing with those that weren’t in CSP and they all decided to take it next year. . College Board MCQ Final . Going into the Final, I was scared and nervous as the MCQ had 50 questions about a topic that two years ago was almost completely unknown to me. However, after watching the AP College board videos over the course of the trimester and also performing a lot of hands on activities such as creating our fast pages and learning on khan academy (especially the front end side). I was actually extremely surprise on my result: 46/50!! . Here are the questions I got Wrong On the MCQ . . Which of the following is a primary reason for the use of open protocols on the Internet? The right answer to this is: Open protocols provide a way to standardize data transmission between different devices. | This is the right answer because you need a standardized way of transmission in order to create a way of transmission between different devices across different platforms. | . | . A video game character can face toward one of four directions: north, south, east, and west. Each direction is stored in memory as a sequence of four bits. A new version of the game is created in which the character can face toward one of eight directions, adding northwest, northeast, southwest, and southeast to the original four possibilities. Which of the following statements is true about how the eight directions must be stored in memory? The right answer to this is: Four bits are enough to store the eight directions. | This is the right answer because Four bits can represent 2^4, or 16 pieces of information. | . | . Consider the following numeric values. | Binary 1011 Binary 1101 Decimal 5 Decimal 12 Which of the following lists the values in order from least to greatest? . The right answer to this is: Decimal 5, binary 1011, decimal 12, binary 1101 | This is the right answer because Binary 1011 is equivalent to decimal 11 and should be placed before decimal 12. | . . Consider the following code segment. | x ← 25 . y ← 50 . z ← 75 . x ← y . y ← z . z ← x . Which of the variables have the value 50 after executing the code segment? . The right answer to this is: x and z only | This is the right answer because the value of y is initially 50, but its value is changed to 75 in the fifth statement. The fourth statement assigns the value 50 to x. The sixth statement assigns the value 50 to z. | .",
            "url": "https://taiyoi.github.io/Compsci22/2022/11/08/CSP-Final.html",
            "relUrl": "/2022/11/08/CSP-Final.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "APCSP MCQ",
            "content": "MCQ College Board . . Questions/Difficulties . Overall, the questions were very difficult because I didn’t have much coding algorithm experience so I had to go online and do some researching. But overall, it started to make sense overtime. It was very similar to other algorithmic things in life like solving a rubix cube and math. . MCQ College Board PT.2 . I was having lots of trouble on the Internet portion of the APprep part. Although, I got all the answers correct last time the internet portion of the mc was difficult. The specific question: “Open protocols allow devices to specify how data packets are to be routed on the Internet in advance.” Stumped me because I didnt really have much experience with routing on the internet. .",
            "url": "https://taiyoi.github.io/Compsci22/class%20activities/week%206/2022/10/02/APPrepMC.html",
            "relUrl": "/class%20activities/week%206/2022/10/02/APPrepMC.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Scrum Team",
            "content": "Scrum Master: Ethan Tran | DevOPs: Rohin Sood | Frontend Devs: Luna Iwazaki, Taiyo Iwazaki | Backend Dev: Parav Salaniwal | . .",
            "url": "https://taiyoi.github.io/Compsci22/scrum/2022/09/26/Scrum.html",
            "relUrl": "/scrum/2022/09/26/Scrum.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Human day blog",
            "content": "What are we even talking about? . What makes one happy and what goals and habits does that person do to obtain happiness | . Psychology and The Good Life . Students are too focused on school and stressed over classes that they cannot enjoy life | Some of those leisurely activities include not being able to read books because of time restrictions | Students are overwhelmed, they are losing valuable information that they could gain by performing the leisurely activities like reading books. | Anxiety, Pressure, and Stress cause drop in performance. | Students become depressed and cannot perform tasks. | . What can students do in class to help combat stress and anxiety? . Being an Active listener | Doing your activities in class when you are given the time | Not wasting time that could be used to finish valuable work and being productive. | Become a happier person | Interact with classmates and teachers | . Takeaways . Most students that undergo stress, depression, and anxiety because of school work typically are the ones that do not use their time in class wisely thus, leading to less time to do things outside of class that can help make one less stressed. Using the time given in class will let a student become successful, less stressed, and happier. When you use the your time wisely and plan out a schedule of class work and leisurely activities. Making goals to chase can help you become more productive and waste less time. .",
            "url": "https://taiyoi.github.io/Compsci22/class%20activities/week%203/2022/09/15/Human-Day-Blog.html",
            "relUrl": "/class%20activities/week%203/2022/09/15/Human-Day-Blog.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Creative Development blog",
            "content": "Link . Here is the link to my app lab: https://studio.code.org/projects/applab/Cc-qDDjdZPYrvRCUXBVPxE5Q_7kc9zkwli2nr2dWFDo . Outline . Making a quiz based on different diets | Using different functions on the program blocks | Changing the theme and color of the quiz | Four Answer Options | Using score to determine what type of diet you are associated with. | You can easily change the type of quiz by changing the parameters. | . Building . The project initially was a bit confusing to me and I wasn’t really sure where to start. However, I did have some prior experience from other sources such as FLL and code.org coding day. Using primarily the “on event” and “set screen” blocks, I was able to create a quiz that revolved around who I am. I also added a finished screen and fail screen. Along with those, I added many images to make my code pop up more. Coming up with the questions was also really fun because The project was really fun to make and I enjoyed the experience. . Findings . Code.org is easier to use than python because of the blocks which allows for a better user experience | Blocks let you add and adjust code much easier | Website lets you view output automatically | Can run and test programs much easier | Can be run in your own web browser | .",
            "url": "https://taiyoi.github.io/Compsci22/class%20activities/week%203/2022/09/12/creative-development.html",
            "relUrl": "/class%20activities/week%203/2022/09/12/creative-development.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Performance Task",
            "content": "Purpose . Creating awareness of other running athletes and gaining more traction to running as a sport Bringing other athletes from other sports into cross country and track because it can help them improve in their other sport Helping those who don’t have resources to help them run by repurposing old running shoes and making them look new Donating old or new running shoes to those in need of shoes or in need of shoes for their sport Safety, bringing different exercises and stretches on the website to help those experiencing shinsplints ect. to help them find out what stretch, exercise, or help they might need for their issue . Initial Thoughts . Using all of the team members different coding skills this website can be able to work as a athletic website in a whole. My web design can help make the website look less boring and have videos or images and colors to direct athletes to different pages of the website. Luna, who is also in cross country and track can add in his input and help bring real facts onto this website. He can also give us experience as to his sport and how he deals with problems when running. . Code . Throughout this trimester, I have learned a lot about how to code a blog and now creating an app that can run what ever I code. .",
            "url": "https://taiyoi.github.io/Compsci22/class%20activities/week%203/2022/09/12/Performance-Task.html",
            "relUrl": "/class%20activities/week%203/2022/09/12/Performance-Task.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Loops in functions",
            "content": "Recursive Function . Recursive functions are used for computations | Recursive functions call onto dictionaries | Dictionaries are a sequence of variables that functions can pull from. | . def factorial(x): &quot;&quot;&quot;This is a recursive function to find the factorial of an integer&quot;&quot;&quot; if x == 1: return 1 else: return (x * factorial(x-1)) num = 5 print(&quot;The factorial of&quot;, num, &quot;is&quot;, factorial(num)) . The factorial of 5 is 120 . While Functions . The while loop is used to repeat a section of code an unknown number of times until a specific condition is met | . # numbers up to # sum = 1+2+3+...+n # To take input from the user, # n = int(input(&quot;Enter n: &quot;)) n = 10 # initialize sum and counter sum = 0 i = 1 while i &lt;= n: sum = sum + i i = i+1 # update counter # print the sum print(&quot;The sum is&quot;, sum) . The sum is 55 .",
            "url": "https://taiyoi.github.io/Compsci22/week%203/2022/09/06/loops.html",
            "relUrl": "/week%203/2022/09/06/loops.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Java",
            "content": "JavaScript references . JavaScript is the most important language you need to learn as a frontend developer. It&#39;s a great first language for web developers to learn. . W3Schools - reference | feecodecamp.org - pbl . | javascript30.com - pbl . | . console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, World!&quot;); . Hello, World! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Taiyo&quot;, &quot;TaiyoI&quot;, 2025), new Person(&quot;Rohin&quot;, &quot;rohinsood&quot;, 2025), new Person(&quot;Ethan&quot;, &quot;realethantran&quot;, 2025), new Person(&quot;Luna&quot;, &quot;lunaiwa&quot;, 2025), new Person(&quot;Parav&quot;, &quot;paravsalaniwal&quot;, 2025), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Taiyo&#39;, ghID: &#39;TaiyoI&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Rohin&#39;, ghID: &#39;rohinsood&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Ethan&#39;, ghID: &#39;realethantran&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Luna&#39;, ghID: &#39;lunaiwa&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Parav&#39;, ghID: &#39;paravsalaniwal&#39;, classOf: 2025, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Taiyo | TaiyoI | 2025 | Student | Rohin | rohinsood | 2025 | Student | Ethan | realethantran | 2025 | Student | Luna | lunaiwa | 2025 | Student | Parav | paravsalaniwal | 2025 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://taiyoi.github.io/Compsci22/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Installation Checks",
            "content": "python --version python2 --version . Python 3.9.12 Python 2.7.18 . conda list . # packages in environment at /Users/taiyoi/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 python3912jvsc74a57bd0a7fbbb54f4c181edc972ed0306a01439bd91c43236a2d6fefc317f72e31b9e0c /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd0a7fbbb54f4c181edc972ed0306a01439bd91c43236a2d6fefc317f72e31b9e0c bash /Users/taiyoi/Library/Jupyter/kernels/bash javascript /Users/taiyoi/Library/Jupyter/kernels/javascript python3 /Users/taiyoi/opt/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python389jvsc74a57bd031f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6 python3912jvsc74a57bd0a7fbbb54f4c181edc972ed0306a01439bd91c43236a2d6fefc317f72e31b9e0c /Users/taiyoi/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3912jvsc74a57bd0a7fbbb54f4c181edc972ed0306a01439bd91c43236a2d6fefc317f72e31b9e0c python3 /Users/taiyoi/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://taiyoi.github.io/Compsci22/techtalk/bash_checks",
            "relUrl": "/techtalk/bash_checks",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Observations",
            "content": "Theme Changed . Here is a screenshot of me changing the theme of my fastpages to the hacker theme . . . Observations . My _pages links are not working so I cannot search, click on my different subjects, click on the about me, or click on tags. | However, Everything else seems to be working correctly | .",
            "url": "https://taiyoi.github.io/Compsci22/class%20activities/week%203/2022/09/02/Observations.html",
            "relUrl": "/class%20activities/week%203/2022/09/02/Observations.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Alumni Seminar",
            "content": "Notes . six talkers | Anthony Vo | Andrew | Colen | CSA helps apply to real world problems | . What is the biggest challenge you’ve encountered with computer science? . having many errors | googling can help get over errors | clashing egos | focusing on your own path because others will make you feel bad for your self | transition from highschool comp sci to college compsci is hard because theory comes into play | syntax errors are very annoying | google can help you with many syntax problems | temptation to BS many projects | making sure you do not cut corners and make sure everything you do is like a checkbox for points | having a mindset to go above and beyond can help you | Getting started in a new area of computer science. | Computer science is very inter-connected | . Are there any PBL scenarios in college computer science classes (project based learning) . There will not be many hands on experience in college | make the most of your time while you have it | Mix of both: PBL and Tests. | PBL will be in college but not everyone does sprints | . How have you applied CS in your major if you are not majoring in CS? . Converting input | Coding will be everywhere | Many calculations | Stress tests | 3D printing | Computer science can help with higher level math courses | Stats courses | Will be coding in stats | . For existing college students, have you had a job with school or professor? . Tutoring | For coding jobs | Being above and beyond | Intern at Northrop Grumman | Robotics coaches also a teacher at UCSD | Triton AI | Code Ninjas | LG Intern (APIS Web Development) | Insights . | Using this information that I have learned from the seminar, I now understand what I can do with my computer science knowledge in class and implement it to my daily life. | .",
            "url": "https://taiyoi.github.io/Compsci22/extra%20credit/week%202/2022/08/29/Extra-credit-seminar.html",
            "relUrl": "/extra%20credit/week%202/2022/08/29/Extra-credit-seminar.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Taiyo's Jupyter QNAQuiz",
            "content": "#Using a Dictionary with the variable QandA, I was able to create a quiz that abstracted data from the dictionary and inputted it into the quiz. QandA = [ &quot;1. True or False, def is a key word in Python that defines a function&quot;, &quot;True&quot;, &quot;2. True or False, In Python anatomy of you will NOT be importing libraries and functions?&quot;, &quot;False&quot;, &quot;3. True or False, Hello world is a string literal?&quot;, &quot;True&quot;, &quot;4. True or False, Output in Jupyter Notebook is below the code cell&quot;, &quot;True&quot;, &quot;5. True or False, Input and Output in Jupyter Notebook Input is NOT in line with Output?&quot;, &quot;True&quot;, &quot;6. True or False, an if expression is not evaluated for true or false&quot;, &quot;False&quot;, &quot;7. True or False, return command in function does not return msg input by user&quot;, &quot;False&quot;, &quot;8. True or False, false takes branch of code directly under else command&quot;, &quot;True&quot;, &quot;9. True or False, correct += 1 is NOT the way to add one to the score&quot;, &quot;False&quot;, &quot;10. True or False, is msg a parameter to the print function?&quot;, &quot;True&quot;, ] #total points and using new quiz var points = 0 current = 0 quiz = 1 print (&quot;Welcome to my true or false quiz!&quot;) #Using while lets me loop function while quiz &lt; 11: print() question = input(QandA[current]) if question == QandA[current+1]: print (&quot;That&#39;s correct!&quot;) points = points +1 current = current +2 else: print (&quot;Sorry, that is incorrect!&quot;) points = points -1 current = current +2 quiz = quiz +1 #Final Message print(&quot;Good Job, You scored&quot;, points, &quot;points out of ten&quot;) . Welcome to my true or false quiz! That&#39;s correct! That&#39;s correct! That&#39;s correct! That&#39;s correct! That&#39;s correct! That&#39;s correct! That&#39;s correct! That&#39;s correct! That&#39;s correct! That&#39;s correct! Good Job, You scored 10 points out of ten .",
            "url": "https://taiyoi.github.io/Compsci22/week%202/2022/08/26/QNA-List.html",
            "relUrl": "/week%202/2022/08/26/QNA-List.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Taiyo's Jupyter MCQuiz",
            "content": "score = 0 # Question 1 answer1 = input(&quot;What does Def do in a function? na. nothing nb. defines a function nc. sudo code nd. changes directory nAnswer: &quot;) if answer1 == &quot;b&quot; or answer1 == &quot;defines a function&quot;: score += 1 print (&quot;correct!&quot;) print (&quot;score: &quot;, score) print (&quot; n&quot;) else: print(&quot;Incorrect! The answer is: defines a function.&quot;) print(&quot;score: &quot;, score) print(&quot; n&quot;) # Question 2 answer2 = input(&quot;What is Python3 na. A snake nb. A programming language nc. A video game nd. Javascript nAnswer: &quot;) if answer2 == &quot;b&quot; or answer1 == &quot;A programming language&quot;: score += 1 print (&quot;correct!&quot;) print (&quot;score: &quot;, score) print (&quot; n&quot;) else: print(&quot;Incorrect! The answer is: A programming language&quot;) print(&quot;score: &quot;, score) print(&quot; n&quot;) # Question 3 answer3 = input(&quot;What is a sequence? na. Two or more lines of code nb. A line of code nc. multiple words nd. I dont know nAnswer: &quot;) if answer3 == &quot;a&quot; or answer1 == &quot;Two or more lines of code&quot;: score += 1 print (&quot;correct!&quot;) print (&quot;score: &quot;, score) print (&quot; n&quot;) else: print(&quot;Incorrect! The answer is: Two or more lines of code&quot;) print(&quot;score: &quot;, score) print(&quot; n&quot;) #Final Message if score &lt;= 1: print (&quot;Your total score is:&quot;, score, &quot;- Get Better&quot;) elif score == 2: print (&quot;Your total score is:&quot;, score, &quot;- You Did Alright&quot;) else: print (&quot;Your total score is:&quot;, score, &quot;-GOOD JOB!&quot;) . correct! score: 1 correct! score: 2 correct! score: 3 Your total score is: 3 -GOOD JOB! .",
            "url": "https://taiyoi.github.io/Compsci22/week%202/2022/08/26/MCQuiz.html",
            "relUrl": "/week%202/2022/08/26/MCQuiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Extra Credit",
            "content": "Productive Blogging . -blogging for other classes -being productive . Procedural Abstraction . little pieces of code so that you can put them in other larger parts of code | . Data Abstraction .",
            "url": "https://taiyoi.github.io/Compsci22/class%20activities/week%202/2022/08/25/Notes-for-CSP.html",
            "relUrl": "/class%20activities/week%202/2022/08/25/Notes-for-CSP.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Taiyo's Jupyter Post",
            "content": ". &quot;My First Jupyter Notebook&quot; . &quot;JUPYTER!!&quot; . This is my Jupyter Notebook . It is a little different than using markdown in the _post section, however, integrating other languages under the notebook section is much easier. . Using python, I will print &quot;hello&quot; bellow. . Printing Hello!!! . print(&quot;hello&quot;) variable = &quot;Coding is fun&quot; print(variable) . hello Coding is fun . Calculating area of a triangle using Python!!! . a = int(input(&quot;A Value&quot;)) b = int(input(&quot;B Value&quot;)) c = int(input(&quot;C Value&quot;)) # Uncomment below to take inputs from the user # a = float(input(&#39;Enter first side: &#39;)) # b = float(input(&#39;Enter second side: &#39;)) # c = float(input(&#39;Enter third side: &#39;)) # calculate the semi-perimeter s = (a + b + c) / 2 # calculate the area area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 print(&#39;The area of the triangle is %0.2f&#39; %area) . The area of the triangle is 6.00 .",
            "url": "https://taiyoi.github.io/Compsci22/week%201/2022/08/21/Jupyter-Post.html",
            "relUrl": "/week%201/2022/08/21/Jupyter-Post.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "My First Blog Post",
            "content": "My First Blog Post!! . This is my first blog post!! :joy: . Hello, My name is Taiyo Iwazaki and this is my first blog post on my fast pages website for computer science. . My Favorite foods . Pizza | Pasta | Oatmeal | Steak | Ramen | . Ok, now that you have seen my favorite foods, lets explore coding! . Adding a table!! . Times Table Easy . 1 | 2 | 3 | . 2 | 4 | 6 | . 3 | 6 | 9 | . 4 | 8 | 12 | . 5 | 10 | 15 | . Exploring Coding . ’’’ { print(“hello world”) var = “coding is fun” print(“var”) } ‘’’ . My Youtube Channel . Subscribe to my YouTube Channel! :joy: https://www.youtube.com/channel/UC4AOSpmXdOeJXestKv5Fxjw . Photo . Here is a photo! . Thanks For Reading!! .",
            "url": "https://taiyoi.github.io/Compsci22/week%201/2022/08/19/My-First-Post.html",
            "relUrl": "/week%201/2022/08/19/My-First-Post.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus Amount of Bits . +1 | 00000000 | 0 | 0 | 0 | -1 | 10 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | | | .",
            "url": "https://taiyoi.github.io/Compsci22/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Vocab",
          "content": "Vocabulary for this tri here . Key Vocabulary . Sequence: . two or more lines of code | . Variable . A value that changes based off of conditions | .",
          "url": "https://taiyoi.github.io/Compsci22/Vocab/",
          "relUrl": "/Vocab/",
          "date": ""
      }
      
  

  

  

  
      ,"page3": {
          "title": "Game",
          "content": "2048 . 104+24 1420 New Game . Keep Going Try Again? 26688244622 .",
          "url": "https://taiyoi.github.io/Compsci22/game/",
          "relUrl": "/game/",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "Calculator",
          "content": "0 EE x^2 π % 1 2 3 + 4 5 6 - 7 8 9 * A/C 0 . =",
          "url": "https://taiyoi.github.io/Compsci22/calculator/",
          "relUrl": "/calculator/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://taiyoi.github.io/Compsci22/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}